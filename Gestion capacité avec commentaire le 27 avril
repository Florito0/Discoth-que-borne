<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Gestion Capacité d'Accueil</title>
  <!-- Intégration de Font Awesome pour utiliser des icônes dans l'interface -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    /* Réinitialisation des marges et paddings pour une mise en page cohérente */
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Roboto', sans-serif;
    }
    
    /* Style global du corps de la page : fond sombre, centrage du contenu */
    body {
      background-color: #121212;
      color: #ffffff;
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
      padding: 10px;
    }
    
    /* Conteneur principal avec fond gris foncé, coins arrondis et ombre */
    .container {
      background-color: #252525;
      border-radius: 12px;
      width: 100%;
      max-width: 600px;
      overflow: hidden;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
    }
    
    /* En-tête de l'interface avec un fond légèrement plus foncé */
    .header {
      background-color: #2c2c2c;
      padding: 15px;
      text-align: center;
      border-bottom: 1px solid #333;
    }
    
    /* Style du titre principal avec une taille adaptable */
    h1 {
      font-size: clamp(18px, 5vw, 24px);
      font-weight: 700;
      margin-bottom: 8px;
      color: #fff;
    }
    
    /* Style du sous-titre avec une couleur plus claire */
    .subtitle {
      font-size: clamp(14px, 3vw, 16px);
      color: #b3b3b3;
    }
    
    /* Section d'affichage de la capacité actuelle */
    .capacity-display {
      padding: 20px;
      text-align: center;
    }
    
    /* Style du compteur de capacité actuelle avec une grande taille de police */
    .current-capacity {
      font-size: clamp(32px, 10vw, 48px);
      font-weight: 700;
      margin: 15px 0;
    }
    
    /* Barre de progression pour visualiser la capacité */
    .capacity-bar {
      width: 90%;
      max-width: 400px;
      height: 20px;
      background-color: #333;
      border-radius: 10px;
      margin: 15px auto;
      overflow: hidden;
    }
    
    /* Remplissage de la barre de progression avec une transition fluide */
    .capacity-fill {
      height: 100%;
      transition: width 0.3s ease, background 0.3s ease;
    }
    
    /* Style du texte indiquant la capacité actuelle/maximale */
    .capacity-text .max-capacity {
      color: #ff4444;
    }
    
    /* Section des contrôles pour ajuster la capacité et le compteur */
    .capacity-controls {
      padding: 20px;
      display: flex;
      flex-direction: column;
      gap: 25px;
    }
    
    /* Groupe d'entrée pour les champs de saisie (capacité max, compteur actuel) */
    .input-group {
      display: flex;
      flex-wrap: wrap;
      justify-content: space-between;
      align-items: center;
      gap: 10px;
      padding-bottom: 10px;
      border-bottom: 1px solid #333;
    }
    
    /* Style des étiquettes des champs de saisie */
    .input-group label {
      font-size: clamp(14px, 3vw, 16px);
      font-weight: 600;
      flex: 1;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    /* Couleurs spécifiques pour les étiquettes des champs de capacité max et compteur actuel */
    .input-group.max-capacity label,
    .input-group.current-count label {
      color: #ffffff;
    }
    
    .input-group.max-capacity label i,
    .input-group.current-count label i {
      color: #ffffff;
    }
    
    /* Conteneur pour les champs d'entrée et boutons associés */
    .input-group .input-wrapper {
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    /* Style des champs de saisie */
    .input-group input {
      width: 100px;
      max-width: 100%;
      padding: 8px;
      background-color: #333;
      border: none;
      color: white;
      border-radius: 8px;
      text-align: center;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
      transition: box-shadow 0.2s ease;
    }
    
    /* Effet au focus des champs de saisie */
    .input-group input:focus {
      outline: none;
      box-shadow: 0 2px 8px rgba(187, 134, 252, 0.5);
    }
    
    /* Style pour les champs en lecture seule (compteur actuel) */
    .input-group input[readonly] {
      background-color: #2c2c2c;
      cursor: not-allowed;
    }
    
    /* Groupe de contrôle pour les boutons d'incrémentation/décrémentation */
    .control-group {
      display: flex;
      flex-wrap: wrap;
      justify-content: space-between;
      align-items: center;
      gap: 10px;
    }
    
    /* Style des étiquettes des boutons de contrôle */
    .control-group label {
      font-size: clamp(14px, 3vw, 16px);
      color: #b3b3b3;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .control-group label i {
      color: #b3b3b3;
    }
    
    /* Conteneur pour les boutons de contrôle (+ et -) */
    .control-buttons {
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    /* Style des boutons de contrôle */
    .control-btn {
      width: clamp(30px, 8vw, 40px);
      height: clamp(30px, 8vw, 40px);
      border-radius: 50%;
      border: none;
      background-color: #333;
      color: #ffffff;
      font-size: clamp(14px, 4vw, 18px);
      cursor: pointer;
      display: flex;
      justify-content: center;
      align-items: center;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
      transition: background-color 0.2s, box-shadow 0.2s;
    }
    
    /* Effet au survol des boutons de contrôle */
    .control-btn:hover {
      background-color: #444;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.5);
    }
    
    /* Effet au clic des boutons de contrôle avec une animation de pulsation */
    .control-btn:active {
      background-color: #555;
      animation: pulse 0.2s ease;
    }
    
    /* Animation de pulsation pour les boutons */
    @keyframes pulse {
      0% { transform: scale(1); }
      50% { transform: scale(1.1); }
      100% { transform: scale(1); }
    }
    
    /* Conteneur pour les boutons de réinitialisation */
    .reset-buttons {
      display: flex;
      justify-content: flex-start;
      gap: 10px;
      margin-top: 5px;
      padding-bottom: 10px;
      border-bottom: 1px solid #333;
    }
    
    /* Style commun pour les boutons d'action (appliquer, réinitialiser, auto-réinitialiser) */
    .update-btn, .reset-btn, .auto-reset-btn {
      padding: 8px 14px;
      color: #ffffff;
      border: 1px solid #444;
      border-radius: 6px;
      font-size: clamp(12px, 3vw, 14px);
      font-weight: 500;
      cursor: pointer;
      transition: background-color 0.2s, border-color 0.2s, transform 0.1s;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 6px;
      position: relative;
    }
    
    /* Style spécifique pour le bouton "Appliquer" avec un dégradé violet */
    .update-btn {
      background: linear-gradient(to right, #9733EE, #DA22FF);
      border: none;
      box-shadow: 0 2px 5px rgba(151, 51, 238, 0.3);
    }
    
    /* Style pour les boutons de réinitialisation */
    .reset-btn, .auto-reset-btn {
      background-color: #3a3a3a;
      border: 1px solid #555;
    }
    
    /* Effet au survol des boutons d'action */
    .update-btn:hover, .reset-btn:hover, .auto-reset-btn:hover {
      transform: translateY(-1px);
    }
    
    /* Effet au survol du bouton "Appliquer" */
    .update-btn:hover {
      background: linear-gradient(to right, #a144ff, #e055ff);
      box-shadow: 0 2px 8px rgba(151, 51, 238, 0.5);
    }
    
    /* Effet au survol des boutons de réinitialisation */
    .reset-btn:hover, .auto-reset-btn:hover {
      background-color: #4a4a4a;
      border-color: #777;
    }
    
    /* Effet au clic des boutons d'action */
    .update-btn:active, .reset-btn:active, .auto-reset-btn:active {
      transform: translateY(1px);
    }

    /* Couleur des icônes dans les boutons */
    .update-btn i { color: #ffffff; }
    .reset-btn i { color: #ff5555; }
    .auto-reset-btn i { color: #3399ff; }

    /* Infobulles pour les boutons */
    .update-btn::after, .reset-btn::after, .auto-reset-btn::after {
      content: attr(data-tooltip);
      position: absolute;
      bottom: 100%;
      left: 50%;
      transform: translateX(-50%);
      background-color: #333;
      color: #fff;
      padding: 5px 10px;
      border-radius: 4px;
      font-size: 12px;
      white-space: nowrap;
      opacity: 0;
      visibility: hidden;
      transition: opacity 0.2s, visibility 0.2s;
      z-index: 10;
    }

    /* Affichage des infobulles au survol */
    .update-btn:hover::after, .reset-btn:hover::after, .auto-reset-btn:hover::after {
      opacity: 1;
      visibility: visible;
    }

    /* Style de la boîte de dialogue modale pour confirmer la réinitialisation */
    .modal-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.7);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
      visibility: hidden;
      opacity: 0;
      transition: opacity 0.3s ease;
    }

    /* Affichage de la modale */
    .modal-overlay.show {
      visibility: visible;
      opacity: 1;
    }

    /* Style du contenu de la modale */
    .modal {
      background-color: #2c2c2c;
      border-radius: 8px;
      padding: 20px;
      width: 90%;
      max-width: 400px;
      text-align: center;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);
    }

    /* Style du texte dans la modale */
    .modal p {
      font-size: clamp(14px, 4vw, 16px);
      margin-bottom: 20px;
      color: #b3b3b3;
    }

    /* Style des boutons de la modale */
    .modal-buttons {
      display: flex;
      justify-content: center;
      gap: 10px;
    }

    .modal-btn {
      padding: 10px 20px;
      border: none;
      border-radius: 4px;
      font-size: clamp(14px, 4vw, 16px);
      font-weight: 600;
      cursor: pointer;
      transition: opacity 0.2s;
    }

    /* Style du bouton "Oui" avec un dégradé rouge */
    .modal-btn.yes {
      background: linear-gradient(to right, #ff4444, #ff7777);
      color: white;
    }

    /* Style du bouton "Non" avec un dégradé gris */
    .modal-btn.no {
      background: linear-gradient(to right, #666, #999);
      color: white;
    }

    /* Effet au survol des boutons de la modale */
    .modal-btn:hover {
      opacity: 0.9;
    }

    /* Effet au clic des boutons de la modale */
    .modal-btn:active {
      opacity: 0.8;
    }

    /* Masquer l'interface de réinitialisation automatique par défaut */
    #autoResetInterface {
      display: none;
    }

    /* Section pour la planification des réinitialisations automatiques */
    .schedule-section {
      padding: 20px;
    }

    /* Style pour chaque jour de la planification */
    .day-schedule {
      margin-bottom: 10px;
    }

    /* En-tête de chaque jour avec bascule, nom du jour, statut et heure */
    .day-header {
      display: flex;
      align-items: center;
      padding: 10px;
      background-color: #2c2c2c;
      border-radius: 6px;
      transition: background-color 0.2s ease;
    }

    /* Style lorsque la bascule est active */
    .day-header.active {
      background-color: #333;
      border-left: 4px solid #9733EE;
    }

    /* Style de la bascule (checkbox) */
    .toggle {
      margin-right: 15px;
    }

    /* Style du nom du jour */
    .day-name {
      font-size: 18px;
      font-weight: 500;
      flex: 1;
      color: #b3b3b3;
    }

    /* Style du statut (activé/désactivé) */
    .status {
      font-size: 14px;
      margin-right: 15px;
    }

    .status.active {
      color: #33cc33;
    }

    .status.inactive {
      color: #b3b3b3;
    }

    /* Style du champ de saisie de l'heure */
    .time-input {
      padding: 8px;
      background-color: #333;
      border: none;
      color: white;
      border-radius: 8px;
      width: 100px;
      text-align: center;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
      transition: box-shadow 0.2s ease;
    }

    /* Style du champ d'heure lorsqu'il est désactivé */
    .time-input:disabled {
      background-color: #2c2c2c;
      opacity: 0.6;
      cursor: not-allowed;
    }

    /* Effet au focus du champ d'heure */
    .time-input:focus {
      outline: none;
      box-shadow: 0 2px 8px rgba(187, 134, 252, 0.5);
    }

    /* Style du bouton de retour */
    .back-btn {
      padding: 12px;
      background: linear-gradient(to right, #666, #999);
      color: white;
      border: none;
      border-radius: 6px;
      font-size: clamp(14px, 4vw, 16px);
      font-weight: 500;
      cursor: pointer;
      transition: background-color 0.2s, border-color 0.2s;
      width: 100%;
      margin-top: 10px;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
    }

    /* Effet au survol du bouton de retour */
    .back-btn:hover {
      background-color: #3a3a3a;
      border-color: #777;
    }

    /* Effet au clic du bouton de retour */
    .back-btn:active {
      background-color: #444;
    }

    /* Adaptations pour les écrans de petite taille */
    @media (max-width: 480px) {
      .container {
        margin: 0 5px;
      }
      
      .capacity-controls {
        padding: 10px;
      }
      
      .input-group, .control-group {
        flex-direction: column;
        align-items: flex-start;
      }

      .reset-buttons {
        flex-direction: column;
        gap: 8px;
      }

      .input-group .input-wrapper {
        width: 100%;
        justify-content: flex-start;
      }
    }
  </style>
</head>
<body>
  <!-- Interface principale pour la gestion de la capacité -->
  <div class="container" id="mainInterface">
    <div class="header">
      <h1>GESTION CAPACITÉ</h1>
      <div class="subtitle">Affichage dynamique de la capacité actuelle</div>
    </div>
    
    <!-- Section d'affichage de la capacité actuelle -->
    <div class="capacity-display">
      <div class="current-capacity" id="current-capacity">0</div>
      <div class="capacity-bar">
        <div class="capacity-fill" id="capacity-fill" style="width: 0%"></div>
      </div>
      <div class="capacity-text" id="capacity-text">
        0 / <span class="max-capacity">0</span>
      </div>
    </div>
    
    <!-- Section des contrôles pour ajuster la capacité et le compteur -->
    <div class="capacity-controls">
      <!-- Champ pour définir la capacité maximale -->
      <div class="input-group max-capacity">
        <label><i class="fas fa-tachometer-alt"></i> Capacité Maximum :</label>
        <div class="input-wrapper">
          <button class="update-btn" onclick="updateCapacity()" data-tooltip="Appliquer la nouvelle capacité maximale">
            <i class="fas fa-check"></i> Appliquer
          </button>
          <input type="number" id="max-capacity" min="0" value="100">
        </div>
      </div>
      <!-- Champ pour afficher le nombre de clients actuel (lecture seule) -->
      <div class="input-group current-count">
        <label><i class="fas fa-users"></i> Nombre de Clients Actuel :</label>
        <div class="input-wrapper">
          <input type="number" id="current-count" min="0" value="0" readonly>
        </div>
      </div>
      <!-- Boutons pour incrémenter/décrémenter le nombre de clients -->
      <div class="control-group">
        <label><i class="fas fa-sliders-h"></i> Ajustement :</label>
        <div class="control-buttons">
          <button class="control-btn" onclick="updateCount(-1)" aria-label="Décrémenter le nombre de clients">−</button>
          <button class="control-btn" onclick="updateCount(1)" aria-label="Incrémenter le nombre de clients">+</button>
        </div>
      </div>
      <!-- Boutons pour réinitialiser ou planifier une réinitialisation automatique -->
      <div class="reset-buttons">
        <button class="reset-btn" onclick="showModal()" data-tooltip="Remettre le compteur de clients à 0">
          <i class="fas fa-undo"></i> Réinitialiser le Compteur de Clients
        </button>
        <button class="auto-reset-btn" onclick="showAutoResetInterface()" data-tooltip="Programmer une réinitialisation automatique du compteur">
          <i class="fas fa-calendar-alt"></i> Planifier une Réinitialisation Auto
        </button>
      </div>
    </div>
  </div>

  <!-- Interface pour la planification des réinitialisations automatiques -->
  <div class="container" id="autoResetInterface">
    <div class="header">
      <h1>Redémarrage Automatique</h1>
      <div class="subtitle">Planification de la remise à zéro des compteurs</div>
    </div>
    
    <!-- Section de planification avec un jour par section -->
    <div class="schedule-section">
      <!-- Exemple pour le lundi -->
      <div class="day-schedule">
        <div class="day-header">
          <input type="checkbox" class="toggle" id="lundi-toggle">
          <span class="day-name">Lundi</span>
          <span class="status inactive">Désactivé</span>
          <input type="time" class="time-input" value="00:00" disabled>
        </div>
      </div>
      <!-- Sections similaires pour les autres jours -->
      <div class="day-schedule">
        <div class="day-header">
          <input type="checkbox" class="toggle" id="mardi-toggle">
          <span class="day-name">Mardi</span>
          <span class="status inactive">Désactivé</span>
          <input type="time" class="time-input" value="00:00" disabled>
        </div>
      </div>
      <div class="day-schedule">
        <div class="day-header">
          <input type="checkbox" class="toggle" id="mercredi-toggle">
          <span class="day-name">Mercredi</span>
          <span class="status inactive">Désactivé</span>
          <input type="time" class="time-input" value="00:00" disabled>
        </div>
      </div>
      <div class="day-schedule">
        <div class="day-header">
          <input type="checkbox" class="toggle" id="jeudi-toggle">
          <span class="day-name">Jeudi</span>
          <span class="status inactive">Désactivé</span>
          <input type="time" class="time-input" value="00:00" disabled>
        </div>
      </div>
      <div class="day-schedule">
        <div class="day-header">
          <input type="checkbox" class="toggle" id="vendredi-toggle">
          <span class="day-name">Vendredi</span>
          <span class="status inactive">Désactivé</span>
          <input type="time" class="time-input" value="00:00" disabled>
        </div>
      </div>
      <div class="day-schedule">
        <div class="day-header">
          <input type="checkbox" class="toggle" id="samedi-toggle">
          <span class="day-name">Samedi</span>
          <span class="status inactive">Désactivé</span>
          <input type="time" class="time-input" value="00:00" disabled>
        </div>
      </div>
      <div class="day-schedule">
        <div class="day-header">
          <input type="checkbox" class="toggle" id="dimanche-toggle">
          <span class="day-name">Dimanche</span>
          <span class="status inactive">Désactivé</span>
          <input type="time" class="time-input" value="00:00" disabled>
        </div>
      </div>
      
      <!-- Bouton pour enregistrer la planification -->
      <button class="update-btn" onclick="saveSchedule()" data-tooltip="Enregistrer la planification de réinitialisation">
        <i class="fas fa-save"></i> Enregistrer la planification
      </button>
      <!-- Bouton pour retourner à l'interface principale -->
      <button class="back-btn" onclick="showMainInterface()">
        <i class="fas fa-arrow-left"></i> Retour à Gestion Capacité
      </button>
    </div>
  </div>

  <!-- Boîte de dialogue modale pour confirmer la réinitialisation du compteur -->
  <div class="modal-overlay" id="modalOverlay">
    <div class="modal">
      <p>Êtes-vous sûr de vouloir réinitialiser le nombre de clients actuel à 0 ?</p>
      <div class="modal-buttons">
        <button class="modal-btn yes" onclick="confirmReset(true)">Oui</button>
        <button class="modal-btn no" onclick="confirmReset(false)">Non</button>
      </div>
    </div>
  </div>

  <script>
    // Variables globales pour gérer l'état de l'application
    let maxCapacity = 100; // Capacité maximale par défaut
    let currentCount = 0; // Compteur actuel de clients
    let schedule = {}; // Objet pour stocker la planification des réinitialisations automatiques

    // Fonction pour interpoler les couleurs (utilisée pour la barre de progression)
    function interpolateColor(color1, color2, factor) {
      const r1 = parseInt(color1.slice(1, 3), 16);
      const g1 = parseInt(color1.slice(3, 5), 16);
      const b1 = parseInt(color1.slice(5, 7), 16);
      const r2 = parseInt(color2.slice(1, 3), 16);
      const g2 = parseInt(color2.slice(3, 5), 16);
      const b2 = parseInt(color2.slice(5, 7), 16);

      const r = Math.round(r1 + (r2 - r1) * factor);
      const g = Math.round(g1 + (g2 - g1) * factor);
      const b = Math.round(b1 + (b2 - b1) * factor);

      return `rgb(${r}, ${g}, ${b})`;
    }

    // Met à jour l'affichage de l'interface (compteur, barre, texte)
    function updateDisplay() {
      const currentCapacityEl = document.getElementById('current-capacity');
      const capacityFillEl = document.getElementById('capacity-fill');
      const capacityTextEl = document.getElementById('capacity-text');
      const currentInput = document.getElementById('current-count');
      
      // Met à jour le texte du compteur
      currentCapacityEl.textContent = currentCount;
      currentInput.value = currentCount;
      
      // Calcule le pourcentage pour la barre de progression
      const percentage = maxCapacity > 0 ? (currentCount / maxCapacity) * 100 : 0;
      capacityFillEl.style.width = `${percentage}%`;
      
      // Applique un dégradé dynamique à la barre de progression
      const startColor1 = '#9733EE';
      const startColor2 = '#DA22FF';
      const endColor = '#ff4444';
      const factor = maxCapacity > 0 ? currentCount / maxCapacity : 0;
      
      const dynamicEndColor = interpolateColor(startColor2, endColor, factor);
      capacityFillEl.style.background = `linear-gradient(to right, ${startColor1}, ${dynamicEndColor})`;
      
      // Met à jour le texte de capacité (actuel/max)
      capacityTextEl.innerHTML = `${currentCount} / <span class="max-capacity">${maxCapacity}</span>`;
    }

    // Ajuste le compteur de clients (+1 ou -1)
    function updateCount(change) {
      let newCount = currentCount + change;
      
      // Empêche les valeurs négatives ou supérieures à la capacité max
      if (newCount < 0) newCount = 0;
      if (newCount > maxCapacity) newCount = maxCapacity;
      
      currentCount = newCount;
      updateDisplay();
    }

    // Met à jour la capacité maximale
    function updateCapacity() {
      const maxInput = document.getElementById('max-capacity');
      const updateBtn = document.querySelector('.update-btn');
      
      // Récupère la nouvelle capacité maximale
      maxCapacity = parseInt(maxInput.value) || 0;
      if (maxCapacity < 0) maxCapacity = 0;
      
      // Ajuste le compteur actuel si nécessaire
      if (currentCount > maxCapacity) {
        currentCount = maxCapacity;
      }
      
      updateDisplay();
      
      // Feedback visuel : changement temporaire de couleur du bouton
      updateBtn.style.background = 'linear-gradient(to right, #33cc33, #66ff66)';
      setTimeout(() => {
        updateBtn.style.background = 'linear-gradient(to right, #9733EE, #DA22FF)';
      }, 500);
    }

    // Réinitialise le compteur de clients à 0
    function resetCount() {
      currentCount = 0;
      updateDisplay();
    }

    // Sélection de la modale
    const modalOverlay = document.getElementById('modalOverlay');

    // Affiche la modale de confirmation pour la réinitialisation
    function showModal() {
      modalOverlay.classList.add('show');
    }

    // Gère la confirmation de la réinitialisation
    function confirmReset(confirmed) {
      if (confirmed) {
        resetCount();
      }
      modalOverlay.classList.remove('show');
    }

    // Sélection des interfaces principale et de planification
    const mainInterface = document.getElementById('mainInterface');
    const autoResetInterface = document.getElementById('autoResetInterface');

    // Affiche l'interface de réinitialisation automatique
    function showAutoResetInterface() {
      mainInterface.style.display = 'none';
      autoResetInterface.style.display = 'block';
    }

    // Revient à l'interface principale
    function showMainInterface() {
      autoResetInterface.style.display = 'none';
      mainInterface.style.display = 'block';
    }

    // Gestion des bascules pour activer/désactiver les jours
    document.querySelectorAll('.toggle').forEach(toggle => {
      toggle.addEventListener('change', (e) => {
        const dayHeader = e.target.closest('.day-header');
        const timeInput = dayHeader.querySelector('.time-input');
        const status = dayHeader.querySelector('.status');
        
        // Active/désactive le champ de saisie de l'heure
        timeInput.disabled = !e.target.checked;
        dayHeader.classList.toggle('active', e.target.checked);
        
        // Met à jour le statut affiché
        if (e.target.checked) {
          status.textContent = 'Activé';
          status.classList.remove('inactive');
          status.classList.add('active');
        } else {
          status.textContent = 'Désactivé';
          status.classList.remove('active');
          status.classList.add('inactive');
          timeInput.value = '00:00';
        }
      });
    });

    // Enregistre la planification des réinitialisations automatiques
    function saveSchedule() {
      let hasError = false;

      // Parcourt chaque jour pour vérifier les entrées
      document.querySelectorAll('.day-schedule').forEach(day => {
        const toggle = day.querySelector('.toggle');
        const timeInput = day.querySelector('.time-input');
        const dayName = day.querySelector('.day-name').textContent;

        // Vérifie si un jour activé a une heure valide
        if (toggle.checked && !timeInput.value) {
          hasError = true;
          timeInput.style.border = '1px solid #ff4444';
        } else {
          timeInput.style.border = 'none';
          schedule[dayName] = toggle.checked ? timeInput.value : 'Désactivé';
        }
      });

      // Affiche une erreur si nécessaire, sinon enregistre
      if (hasError) {
        alert('Veuillez spécifier une heure pour tous les jours activés.');
      } else {
        console.log('Planification enregistrée :', schedule);
        alert('Planification enregistrée avec succès !');
        showMainInterface();
      }
    }

    // Initialisation de l'interface
    document.getElementById('max-capacity').value = maxCapacity;
    document.getElementById('current-count').value = currentCount;
    updateDisplay();
  </script>
</body>
</html>
