// Définitions des constantes pour les mois et jours abrégés
        const months = ['Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre'];
        const days = ['L', 'M', 'M', 'J', 'V', 'S', 'D'];

        // Variables globales
        let currentYear = new Date().getFullYear(); // Année actuelle (ex: 2025)
        let currentMonth = new Date().getMonth(); // Mois actuel (0-11)
        let codes = {}; // Objet stockant les codes au format { "YYYY-MM-DD": "L 123" }
        let lastGenerateType = 'month'; // Type de génération par défaut (mois)
        let yearDropdown = null; // Référence au menu déroulant des années

        function init() {
            // Fonction d'initialisation appelée au chargement de la page
            renderYearMonthNav(); // Rend la barre de navigation année/mois
            renderCalendar(currentYear, currentMonth); // Rend le calendrier
            createYearDropdown(); // Crée le menu déroulant des années
        }

        function renderYearMonthNav() {
            // Rend la barre de navigation avec le sélecteur d'année et les boutons de mois
            const nav = document.getElementById('yearMonthNav');
            nav.innerHTML = `
                <div class="year-select-btn" id="yearSelectBtn">${currentYear}</div>
                <div class="month-nav" id="monthNav"></div>
            `;

            // Ajoute les boutons pour chaque mois
            const monthNav = document.getElementById('monthNav');
            months.forEach((month, index) => {
                const btn = document.createElement('button');
                btn.className = `month-btn ${index === currentMonth ? 'active' : ''}`;
                btn.textContent = month;
                btn.onclick = () => {
                    currentMonth = index;
                    renderYearMonthNav();
                    renderCalendar(currentYear, index);
                };
                monthNav.appendChild(btn);
            });

            // Attache l'événement de clic pour afficher/masquer le menu déroulant
            const yearBtn = document.getElementById('yearSelectBtn');
            if (yearBtn) {
                yearBtn.removeEventListener('click', toggleYearDropdown); // Évite les doublons d'écouteurs
                yearBtn.addEventListener('click', (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    toggleYearDropdown();
                });
            }
        }

        function createYearDropdown() {
            // Crée le menu déroulant pour sélectionner l'année
            yearDropdown = document.createElement('div');
            yearDropdown.className = 'year-dropdown';
            yearDropdown.id = 'yearDropdown';
            yearDropdown.style.display = 'none';
            yearDropdown.style.position = 'absolute';
            yearDropdown.style.zIndex = '1000';

            // Ajoute les options d'années (2025, 2026, 2027)
            const years = [2025, 2026, 2027];
            years.forEach(year => {
                const option = document.createElement('div');
                option.className = 'year-option';
                option.textContent = year;
                option.onclick = () => {
                    currentYear = year;
                    codes = {}; // Réinitialise les codes pour la nouvelle année
                    renderYearMonthNav();
                    renderCalendar(currentYear, currentMonth);
                    yearDropdown.style.display = 'none';
                };
                yearDropdown.appendChild(option);
            });

            document.body.appendChild(yearDropdown); // Ajoute au DOM
        }

        function toggleYearDropdown() {
            // Affiche ou masque le menu déroulant des années
            const yearBtn = document.getElementById('yearSelectBtn');
            if (!yearBtn) {
                console.error('Élément yearSelectBtn non trouvé.');
                return;
            }

            if (!yearDropdown) {
                createYearDropdown();
            }

            // Positionne le menu sous le bouton
            if (yearDropdown.style.display === 'none' || yearDropdown.style.display === '') {
                const rect = yearBtn.getBoundingClientRect();
                yearDropdown.style.left = rect.left + 'px';
                yearDropdown.style.top = rect.bottom + 'px';
                yearDropdown.style.width = yearBtn.offsetWidth + 'px';
                yearDropdown.style.display = 'block';
            } else {
                yearDropdown.style.display = 'none';
            }

            // Ferme le menu si clic ailleurs
            document.addEventListener('click', function closeDropdown(event) {
                if (!yearDropdown.contains(event.target) && event.target !== yearBtn) {
                    yearDropdown.style.display = 'none';
                    document.removeEventListener('click', closeDropdown);
                }
            }, { once: true });
        }

        function renderCalendar(year, month) {
            // Rend le calendrier pour l'année et le mois donnés
            const calendar = document.getElementById('calendar');
            calendar.innerHTML = '';

            // Ajoute l'en-tête des jours (L, M, M, J, V, S, D)
            const header = document.createElement('div');
            header.className = 'week-row';
            ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi', 'Dimanche'].forEach(day => {
                const cell = document.createElement('div');
                cell.className = 'day-cell';
                cell.textContent = day.substring(0, 1);
                header.appendChild(cell);
            });
            calendar.appendChild(header);

            // Calcule les jours du mois
            const firstDay = new Date(year, month, 1).getDay();
            const daysInMonth = new Date(year, month + 1, 0).getDate();
            let dayCount = 1;
            let weeks = Math.ceil((daysInMonth + (firstDay || 7) - 1) / 7);

            const today = new Date();
            const isCurrentMonth = year === today.getFullYear() && month === today.getMonth();

            // Crée les lignes de semaines
            for (let i = 0; i < weeks; i++) {
                const row = document.createElement('div');
                row.className = 'week-row';

                for (let j = 0; j < 7; j++) {
                    const cell = document.createElement('div');
                    cell.className = 'day-cell';

                    // Gère les jours avant/après le mois
                    if ((i === 0 && j < (firstDay || 7) - 1) || dayCount > daysInMonth) {
                        cell.textContent = '';
                    } else {
                        const date = new Date(year, month, dayCount);
                        const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(dayCount).padStart(2, '0')}`;
                        cell.innerHTML = `
                            ${dayCount}<br>
                            <input type="text" value="${codes[dateStr] || ''}" placeholder="Ex: L 237" onchange="updateCode('${dateStr}', this.value)">
                        `;
                        if (isCurrentMonth && date.getDate() === today.getDate()) {
                            cell.classList.add('today');
                        }
                        dayCount++;
                    }
                    row.appendChild(cell);
                }
                calendar.appendChild(row);
            }
        }

        function updateCode(date, value) {
            // Met à jour le code pour une date donnée, converti en majuscules
            codes[date] = value.toUpperCase();
        }

        function generateCodes(type) {
            // Gère la génération de codes pour le mois ou l'année
            lastGenerateType = type;
            if (type === 'month') {
                generateMonthCodes();
            } else if (type === 'year') {
                generateYearCodes();
            }
            // Met à jour l'état actif des boutons
            document.querySelectorAll('.generate-option').forEach(btn => {
                btn.classList.remove('active');
                if (btn.textContent.toLowerCase() === type) btn.classList.add('active');
            });
        }

        function generateMonthCodes() {
            // Génère des codes uniques pour chaque jour du mois actuel
            const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
            const usedNumbers = new Set();

            for (let i = 1; i <= daysInMonth; i++) {
                const date = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(i).padStart(2, '0')}`;
                const dayIndex = new Date(currentYear, currentMonth, i).getDay();
                let randomNum;
                do {
                    randomNum = Math.floor(Math.random() * 999) + 1;
                } while (usedNumbers.has(randomNum));
                usedNumbers.add(randomNum);
                codes[date] = `${days[dayIndex || 6]} ${String(randomNum).padStart(3, '0')}`;
            }
            renderCalendar(currentYear, currentMonth);
        }

        function generateYearCodes() {
            // Génère des codes uniques pour chaque jour des années 2025-2027
            for (let year of [2025, 2026, 2027]) {
                for (let month = 0; month < 12; month++) {
                    const daysInMonth = new Date(year, month + 1, 0).getDate();
                    const usedNumbers = new Set();

                    for (let i = 1; i <= daysInMonth; i++) {
                        const date = `${year}-${String(month + 1).padStart(2, '0')}-${String(i).padStart(2, '0')}`;
                        if (!codes[date]) {
                            const dayIndex = new Date(year, month, i).getDay();
                            let randomNum;
                            do {
                                randomNum = Math.floor(Math.random() * 999) + 1;
                            } while (usedNumbers.has(randomNum));
                            usedNumbers.add(randomNum);
                            codes[date] = `${days[dayIndex || 6]} ${String(randomNum).padStart(3, '0')}`;
                        }
                    }
                }
            }
            renderCalendar(currentYear, currentMonth);
        }

        function exportToPDF() {
            // Exporte le contenu du conteneur en PDF
            try {
                const element = document.querySelector('.container');
                if (!element) {
                    console.error("Élément non trouvé pour l'exportation en PDF.");
                    alert('Une erreur est survenue : le conteneur du planning n\'a pas été trouvé.');
                    return;
                }

                if (typeof html2pdf !== 'function') {
                    throw new Error('html2pdf.js n\'est pas chargé.');
                }

                // Configure et génère le PDF
                html2pdf(element, {
                    margin: 10,
                    filename: `Planning_${currentYear}_${months[currentMonth].replace(' ', '_')}.pdf`,
                    image: { type: 'jpeg', quality: 0.98 },
                    html2canvas: { scale: 2 },
                    jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' }
                }).then(() => {
                    console.log('PDF téléchargé avec succès');
                }).catch(error => {
                    console.error('Erreur lors de la génération du PDF :', error);
                    alert('Une erreur est survenue lors de l’exportation en PDF.');
                });
            } catch (error) {
                console.error('Erreur dans exportToPDF :', error);
                alert('Une erreur est survenue lors de l’exportation en PDF.');
            }
        }

        init(); // Lance l'initialisation au chargement de la page
