<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rapports et Statistiques - Discothèque</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <style>
        /* Styles inchangés */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
        }

        body {
            background-color: #ffffff;
            color: #333;
            min-height: 100vh;
            display: flex;
        }

        .main-content {
            margin-left: 220px;
            padding: 30px;
            width: calc(100% - 220px);
            transition: all 0.3s ease;
        }

        .main-content.collapsed {
            margin-left: 60px;
            width: calc(100% - 60px);
        }

        h1 {
            font-size: 28px;
            font-weight: 700;
            margin-bottom: 20px;
            color: #333;
        }

        .dashboard {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .dashboard-card {
            background: #f9f9f9;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
            text-align: center;
        }

        .dashboard-card h3 {
            font-size: 16px;
            font-weight: 600;
            color: #666;
            margin-bottom: 10px;
        }

        .dashboard-card p {
            font-size: 24px;
            font-weight: 700;
            color: #333;
        }

        .tabs {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            border-bottom: 1px solid #e0e0e0;
        }

        .tab {
            padding: 10px 20px;
            background: #f5f5f5;
            border: none;
            border-radius: 8px 8px 0 0;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            color: #666;
            transition: all 0.3s ease;
        }

        .tab:hover {
            background: #e0e0e0;
        }

        .tab.active {
            background: #ffffff;
            color: #9733EE;
            border-bottom: 2px solid #9733EE;
        }

        .tab-content {
            display: none;
            background: #ffffff;
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .tab-content.active {
            display: block;
        }

        .tab-content h2 {
            font-size: 20px;
            font-weight: 600;
            margin-bottom: 15px;
            color: #333;
        }

        .filters {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            align-items: center;
            flex-wrap: wrap;
        }

        .filters select,
        .filters input[type="number"],
        .filters input[type="date"] {
            padding: 10px;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            font-size: 14px;
        }

        .filters label {
            font-size: 14px;
            color: #666;
            margin-left: 5px;
            margin-right: 10px;
        }

        .filters .gender-filter {
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .filters .gender-filter input[type="checkbox"],
        .filters .gender-filter input[type="radio"] {
            margin-right: 5px;
        }

        .filters .input-group {
            display: flex;
            align-items: center;
            gap: 5px;
            flex-wrap: nowrap;
        }

        .chart-container {
            margin-bottom: 20px;
            position: relative;
        }

        .back-btn {
            padding: 8px 16px;
            background: #e0e0e0;
            border: none;
            border-radius: 8px;
            color: #333;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-bottom: 10px;
            display: none;
        }

        .back-btn:hover {
            background: #cccccc;
        }

        .chart-details {
            background: #f9f9f9;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            padding: 10px;
            margin-bottom: 20px;
            display: none;
        }

        .chart-details p {
            font-size: 14px;
            margin: 5px 0;
            display: flex;
            align-items: center;
        }

        .chart-details input[type="text"] {
            margin-left: 10px;
            padding: 5px;
            border: 1px solid #e0e0e0;
            border-radius: 4px;
            font-size: 14px;
            width: 300px;
        }

        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-primary {
            background: linear-gradient(to right, #9733EE, #DA22FF);
            color: #ffffff;
        }

        .btn-primary:hover {
            background: linear-gradient(to right, #DA22FF, #9733EE);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(151, 51, 238, 0.3);
        }

        .btn-secondary {
            background: #e0e0e0;
            color: #333;
        }

        .btn-secondary:hover {
            background: #cccccc;
        }

        .btn-danger {
            background: #ff5555;
            color: #ffffff;
        }

        .btn-danger:hover {
            background: #ff7777;
        }

        .vestiaire-gauge {
            margin-bottom: 20px;
        }

        .vestiaire-gauge progress {
            width: 100%;
            height: 20px;
            border-radius: 10px;
        }

        .vestiaire-gauge progress::-webkit-progress-value {
            background: #4CAF50;
            border-radius: 10px;
        }

        .vestiaire-gauge progress.warning::-webkit-progress-value {
            background: #FF9800;
        }

        .vestiaire-gauge progress.danger::-webkit-progress-value {
            background: #F44336;
        }

        .vestiaire-gauge p {
            font-size: 14px;
            color: #666;
            margin-top: 5px;
        }

        .data-table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }

        .data-table th,
        .data-table td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #e0e0e0;
        }

        .data-table th {
            background: #f5f5f5;
            font-weight: 600;
            color: #333;
        }

        .data-table td {
            color: #666;
        }

        .data-table td.editable:hover {
            background: #f0f0f0;
            cursor: pointer;
        }

        .positive {
            color: #4CAF50 !important;
        }

        .negative {
            color: #F44336 !important;
        }

        .search-cancel {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }

        .search-cancel input,
        .search-cancel select {
            padding: 10px;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            font-size: 14px;
            width: 200px;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            z-index: 1000;
            justify-content: center;
            align-items: center;
        }

        .modal-content {
            background: #ffffff;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            max-width: 400px;
            width: 90%;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);
        }

        .modal-content h3 {
            font-size: 18px;
            margin-bottom: 15px;
            color: #333;
        }

        .modal-content textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            margin-bottom: 15px;
            font-size: 14px;
        }

        .modal-content .btn-group {
            display: flex;
            gap: 10px;
            justify-content: center;
        }

        .total {
            font-size: 16px;
            font-weight: 600;
            color: #333;
            margin-bottom: 20px;
        }

        .loader {
            font-size: 16px;
            color: #666;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .loader::before {
            content: '';
            display: inline-block;
            width: 20px;
            height: 20px;
            margin-right: 10px;
            border: 2px solid #9733EE;
            border-top-color: transparent;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="main-content">
        <h1>Statistiques et rapports</h1>

        <!-- Tableau de bord global -->
        <div class="dashboard">
            <div class="dashboard-card">
                <h3>Taux d'occupation</h3>
                <p id="dashboardOccupancy">75%</p>
            </div>
            <div class="dashboard-card">
                <h3>CA aujourd'hui</h3>
                <p id="dashboardRevenue">3 500€</p>
            </div>
            <div class="dashboard-card">
                <h3>Tickets vendus</h3>
                <p id="dashboardTickets">200</p>
            </div>
            <div class="dashboard-card">
                <h3>Vestiaire utilisé</h3>
                <p id="vestiaireUsage">80/100</p>
            </div>
        </div>

        <!-- Menu horizontal -->
        <div class="tabs">
            <button class="tab active" onclick="openTab('occupancy')">Taux d'occupation</button>
            <button class="tab" onclick="openTab('tickets')">Rapport tickets</button>
            <button class="tab" onclick="openTab('history')">Historique tickets</button>
            <button class="tab" onclick="openTab('treasury')">Gestion trésorerie</button>
            <button class="tab" onclick="openTab('revenue')">Rapport CA</button>
        </div>

        <!-- Contenu des onglets -->
        <!-- Taux d'occupation -->
        <div id="occupancy" class="tab-content active">
            <h2>Taux d'occupation</h2>
            <button class="btn btn-primary" onclick="exportToPDF('occupancy')">Exporter en PDF</button>
            <div class="filters">
                <select id="monthSelect" onchange="updateOccupancyChart()">
                    <option value="2025-03">Mars 2025</option>
                    <option value="2025-02">Février 2025</option>
                    <option value="2025-01">Janvier 2025</option>
                </select>
                <select id="periodSelect" onchange="updateOccupancyChart()">
                    <option value="month">Par mois</option>
                    <option value="hour">Par heure</option>
                    <option value="year">Par année</option>
                </select>
                <select id="ticketTypeSelect" onchange="updateOccupancyChart()">
                    <option value="entry">Tickets d'entrée</option>
                    <option value="vestiaire">Tickets vestiaire</option>
                </select>
                <div class="gender-filter">
                    <input type="radio" id="genderTotal" name="gender" value="total" checked onchange="updateGenderSelection()">
                    <label for="genderTotal">Total</label>
                    <input type="checkbox" id="genderMen" name="genderMen" value="men" onchange="updateGenderSelection()">
                    <label for="genderMen">Homme</label>
                    <input type="checkbox" id="genderWomen" name="genderWomen" value="women" onchange="updateGenderSelection()">
                    <label for="genderWomen">Femme</label>
                </div>
                <div class="input-group">
                    <input type="number" id="capacityMax" min="1" value="500" onchange="updateCapacity()">
                    <label for="capacityMax">Capacité d'accueil maximum</label>
                </div>
            </div>
            <div class="loader" id="occupancyLoader" style="display: none; text-align: center; padding: 20px;">
                <span>Chargement...</span>
            </div>
            <button class="back-btn" id="backBtn" onclick="backToMonthView()">Retour à la vue par mois</button>
            <div class="chart-container">
                <canvas id="occupancyChart"></canvas>
            </div>
            <div class="chart-details" id="chartDetails">
                <p><strong>Date :</strong> <span id="detailDate">-</span></p>
                <p><strong>Taux d'occupation :</strong> <span id="detailRate">-</span></p>
                <p><strong>Information :</strong> <input type="text" id="detailInfo" value="-"></p>
                <button class="btn btn-primary" onclick="saveInfo()">Sauvegarder</button>
            </div>
            <div class="data-table" id="occupancyTable">
                <table>
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Taux d'occupation</th>
                            <th>Information</th>
                        </tr>
                    </thead>
                    <tbody id="occupancyTableBody">
                        <!-- Rempli dynamiquement -->
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Rapport tickets -->
        <div id="tickets" class="tab-content">
            <h2>Rapport tickets d'entrée et vestiaire</h2>
            <button class="btn btn-primary" onclick="exportToPDF('tickets')">Exporter en PDF</button>
            <div class="filters">
                <!-- Ajout des sélecteurs pour période, mois, semaine et jour -->
                <select id="ticketPeriod" onchange="updateTicketsReport()">
                    <option value="day">Jour</option>
                    <option value="week">Semaine</option>
                    <option value="month">Mois</option>
                </select>
                <!-- Sélecteur de mois -->
                <select id="ticketMonth" onchange="updateTicketDays(); updateTicketsReport()">
                    <option value="2025-03">Mars 2025</option>
                    <option value="2025-02">Février 2025</option>
                    <option value="2025-01">Janvier 2025</option>
                </select>
                <!-- Sélecteur de semaine (dépend du mois sélectionné) -->
                <select id="ticketWeek" onchange="updateTicketsReport()" disabled>
                    <option value="">Sélectionner une semaine</option>
                    <!-- Options remplies dynamiquement -->
                </select>
                <!-- Sélecteur de jour (dépend du mois sélectionné) -->
                <select id="ticketDay" onchange="updateTicketsReport()" disabled>
                    <option value="">Sélectionner un jour</option>
                    <!-- Options remplies dynamiquement -->
                </select>
                <!-- Ajout d'un sélecteur pour le type de ticket d'entrée -->
                <select id="entryTypeSelect" onchange="updateTicketsReport()">
                    <option value="all">Tous les types d'entrée</option>
                    <option value="noDrink">Entrée sans Boisson</option>
                    <option value="withAlcohol">Entrée + Alcool</option>
                    <option value="withBottle">Entrée avec Bouteille</option>
                    <option value="offPeak">Heure Creuse</option>
                    <option value="withSoft">Entrée + Soft</option>
                </select>
            </div>
            <div class="loader" id="ticketsLoader" style="display: none; text-align: center; padding: 20px;">
                <span>Chargement...</span>
            </div>
            <div class="total" id="occupancyImpact">
                Taux d'occupation moyen : 75%
            </div>
            <div class="vestiaire-gauge">
                <h3>Utilisation du vestiaire</h3>
                <div class="filters">
                    <div class="input-group">
                        <input type="number" id="vestiaireMax" min="1" value="100" onchange="updateVestiaireGauge()">
                        <label for="vestiaireMax">Définir la jauge maximum</label>
                    </div>
                </div>
                <progress id="vestiaireProgress" value="80" max="100"></progress>
                <p id="vestiaireText">80/100 cintres utilisés (maximum recommandé : 100)</p>
            </div>
            <div class="data-table" id="ticketsTable">
                <table>
                    <thead>
                        <tr>
                            <th>Type</th>
                            <th>Homme</th>
                            <th>Femme</th>
                            <th>Total</th>
                            <th>Impact sur le taux d'occupation</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Rempli dynamiquement -->
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Historique tickets -->
        <div id="history" class="tab-content">
            <h2>Historique des tickets</h2>
            <button class="btn btn-primary" onclick="exportToPDF('history')">Exporter en PDF</button>
            <div class="search-cancel">
                <input type="text" placeholder="Rechercher par identifiant unique">
                <select>
                    <option>Type : Tous</option>
                    <option>Type : Entrée</option>
                    <option value="entryNoDrink">Type : Entrée sans Boisson</option>
                    <option value="entryWithAlcohol">Type : Entrée + Alcool</option>
                    <option value="entryWithBottle">Type : Entrée avec Bouteille</option>
                    <option value="entryOffPeak">Type : Heure Creuse</option>
                    <option value="entryWithSoft">Type : Entrée + Soft</option>
                    <option>Type : Vestiaire</option>
                </select>
                <button class="btn btn-danger" onclick="showCancelModal()">Annuler commande</button>
            </div>
            <div class="loader" id="historyLoader" style="display: none; text-align: center; padding: 20px;">
                <span>Chargement...</span>
            </div>
            <div class="data-table" id="historyTable">
                <table>
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Type</th>
                            <th>Date</th>
                            <th>Montant</th>
                            <th>Statut</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>#12345</td>
                            <td>Entrée</td>
                            <td>25/03/2025 22:00</td>
                            <td>15€</td>
                            <td>Confirmé</td>
                        </tr>
                        <tr>
                            <td>#12346</td>
                            <td>Vestiaire</td>
                            <td>25/03/2025 22:05</td>
                            <td>5€</td>
                            <td>Annulé (Raison : Erreur de saisie)</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Gestion trésorerie -->
        <div id="treasury" class="tab-content">
            <h2>Gestion de la trésorerie</h2>
            <button class="btn btn-primary" onclick="exportToPDF('treasury')">Exporter en PDF</button>
            <div class="filters">
                <select onchange="filterTreasury()">
                    <option>Type : Tous</option>
                    <option>Type : Entrée</option>
                    <option value="entryNoDrink">Type : Entrée sans Boisson</option>
                    <option value="entryWithAlcohol">Type : Entrée + Alcool</option>
                    <option value="entryWithBottle">Type : Entrée avec Bouteille</option>
                    <option value="entryOffPeak">Type : Heure Creuse</option>
                    <option value="entryWithSoft">Type : Entrée + Soft</option>
                    <option>Type : Vestiaire</option>
                </select>
            </div>
            <div class="loader" id="treasuryLoader" style="display: none; text-align: center; padding: 20px;">
                <span>Chargement...</span>
            </div>
            <div class="total">
                Total pour Mars 2025 : 3 500€
            </div>
            <div class="data-table" id="treasuryTable">
                <table>
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Type</th>
                            <th>Montant</th>
                            <th>Statut</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>25/03/2025</td>
                            <td>Entrée</td>
                            <td>3000€</td>
                            <td>Confirmé</td>
                        </tr>
                        <tr>
                            <td>25/03/2025</td>
                            <td>Vestiaire</td>
                            <td>500€</td>
                            <td>Confirmé</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Rapport CA -->
        <div id="revenue" class="tab-content">
            <h2>Rapport chiffre d'affaires</h2>
            <button class="btn btn-primary" onclick="exportToPDF('revenue')">Exporter en PDF</button>
            <div class="filters">
                <!-- Sélecteur d'année -->
                <select id="revenueYear" onchange="updateRevenueFilters()">
                    <option value="2025">2025</option>
                    <option value="2024">2024</option>
                    <option value="2023">2023</option>
                </select>
                <!-- Sélecteur de mode (période ou mois unique) -->
                <select id="revenueMode" onchange="toggleRevenueFilters()">
                    <option value="range">Période (De - À)</option>
                    <option value="single">Mois unique</option>
                </select>
                <!-- Filtres pour la période (De - À) -->
                <div id="rangeFilters" class="input-group">
                    <label for="revenueFromMonth">De :</label>
                    <select id="revenueFromMonth" onchange="updateRevenueReport()">
                        <!-- Options remplies dynamiquement -->
                    </select>
                    <label for="revenueToMonth">À :</label>
                    <select id="revenueToMonth" onchange="updateRevenueReport()">
                        <!-- Options remplies dynamiquement -->
                    </select>
                </div>
                <!-- Filtre pour un mois unique -->
                <div id="singleMonthFilter" class="input-group" style="display: none;">
                    <label for="revenueSingleMonth">Mois :</label>
                    <select id="revenueSingleMonth" onchange="updateRevenueReport()">
                        <!-- Options remplies dynamiquement -->
                    </select>
                </div>
            </div>
            <div class="loader" id="revenueLoader" style="display: none; text-align: center; padding: 20px;">
                <span>Chargement...</span>
            </div>
            <div class="total" id="revenueTotal">
                Total : 0€
            </div>
            <div class="chart-container">
                <canvas id="revenueChart"></canvas>
            </div>
            <div class="data-table" id="revenueTable">
                <table>
                    <thead>
                        <tr>
                            <th>Mois</th>
                            <th>Entrées (€)</th>
                            <th>Vestiaire (€)</th>
                            <th>Total (€)</th>
                            <th>Comparaison</th>
                        </tr>
                    </thead>
                    <tbody id="revenueTableBody">
                        <!-- Rempli dynamiquement -->
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Modale de confirmation pour annulation -->
        <div id="cancelModal" class="modal">
            <div class="modal-content">
                <h3>Confirmer l'annulation</h3>
                <textarea placeholder="Raison de l'annulation (obligatoire)" id="cancelReason"></textarea>
                <div class="btn-group">
                    <button class="btn btn-primary" onclick="confirmCancel()">Confirmer</button>
                    <button class="btn btn-secondary" onclick="closeCancelModal()">Annuler</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // === Données simulées (à remplacer par une API) ===
        // Données pour le taux d'occupation (par mois, jour, heure)
        const occupancyData = {
            '2025-03': Array.from({ length: 31 }, (_, i) => {
                const menEntry = Math.floor(Math.random() * 150) + 50;
                const womenEntry = Math.floor(Math.random() * 150) + 50;
                const menVestiaire = Math.floor(Math.random() * 30) + 20;
                const womenVestiaire = Math.floor(Math.random() * 30) + 20;
                return {
                    date: `2025-03-${String(i + 1).padStart(2, '0')}`,
                    entry: { men: menEntry, women: womenEntry, total: menEntry + womenEntry },
                    vestiaire: { men: menVestiaire, women: womenVestiaire, total: menVestiaire + womenVestiaire },
                    hourlyData: Array.from({ length: 8 }, (_, h) => {
                        const hour = 20 + h;
                        const hourStr = hour >= 24 ? `0${hour - 24}:00` : `${hour}:00`;
                        const factor = Math.sin((h / 8) * Math.PI) * 0.8 + 0.2;
                        return {
                            hour: hourStr,
                            entry: {
                                men: Math.round(menEntry * factor),
                                women: Math.round(womenEntry * factor),
                                total: Math.round((menEntry + womenEntry) * factor)
                            },
                            vestiaire: {
                                men: Math.round(menVestiaire * factor),
                                women: Math.round(womenVestiaire * factor),
                                total: Math.round((menVestiaire + womenVestiaire) * factor)
                            }
                        };
                    }),
                    info: i + 1 === 25 ? 'Soirée spéciale : forte affluence' : '-'
                };
            }),
            '2025-02': Array.from({ length: 28 }, (_, i) => {
                const menEntry = Math.floor(Math.random() * 150) + 50;
                const womenEntry = Math.floor(Math.random() * 150) + 50;
                const menVestiaire = Math.floor(Math.random() * 30) + 20;
                const womenVestiaire = Math.floor(Math.random() * 30) + 20;
                return {
                    date: `2025-02-${String(i + 1).padStart(2, '0')}`,
                    entry: { men: menEntry, women: womenEntry, total: menEntry + womenEntry },
                    vestiaire: { men: menVestiaire, women: womenVestiaire, total: menVestiaire + womenVestiaire },
                    hourlyData: Array.from({ length: 8 }, (_, h) => {
                        const hour = 20 + h;
                        const hourStr = hour >= 24 ? `0${hour - 24}:00` : `${hour}:00`;
                        const factor = Math.sin((h / 8) * Math.PI) * 0.8 + 0.2;
                        return {
                            hour: hourStr,
                            entry: {
                                men: Math.round(menEntry * factor),
                                women: Math.round(womenEntry * factor),
                                total: Math.round((menEntry + womenEntry) * factor)
                            },
                            vestiaire: {
                                men: Math.round(menVestiaire * factor),
                                women: Math.round(womenVestiaire * factor),
                                total: Math.round((menVestiaire + womenVestiaire) * factor)
                            }
                        };
                    }),
                    info: '-'
                };
            }),
            '2025-01': Array.from({ length: 31 }, (_, i) => {
                const menEntry = Math.floor(Math.random() * 150) + 50;
                const womenEntry = Math.floor(Math.random() * 150) + 50;
                const menVestiaire = Math.floor(Math.random() * 30) + 20;
                const womenVestiaire = Math.floor(Math.random() * 30) + 20;
                return {
                    date: `2025-01-${String(i + 1).padStart(2, '0')}`,
                    entry: { men: menEntry, women: womenEntry, total: menEntry + womenEntry },
                    vestiaire: { men: menVestiaire, women: womenVestiaire, total: menVestiaire + womenVestiaire },
                    hourlyData: Array.from({ length: 8 }, (_, h) => {
                        const hour = 20 + h;
                        const hourStr = hour >= 24 ? `0${hour - 24}:00` : `${hour}:00`;
                        const factor = Math.sin((h / 8) * Math.PI) * 0.8 + 0.2;
                        return {
                            hour: hourStr,
                            entry: {
                                men: Math.round(menEntry * factor),
                                women: Math.round(womenEntry * factor),
                                total: Math.round((menEntry + womenEntry) * factor)
                            },
                            vestiaire: {
                                men: Math.round(menVestiaire * factor),
                                women: Math.round(womenVestiaire * factor),
                                total: Math.round((menVestiaire + womenVestiaire) * factor)
                            }
                        };
                    }),
                    info: '-'
                };
            })
        };

        // Données simulées pour les tickets (par jour, semaine, mois) avec les différents types d'entrée
        // Ces données seront mises à jour dynamiquement via la synchronisation avec le kiosque dans la 2ème partie
        const ticketsData = {
            '2025-03': Array.from({ length: 31 }, (_, i) => {
                const menNoDrink = Math.floor(Math.random() * 30) + 10; // Entrée sans Boisson
                const womenNoDrink = Math.floor(Math.random() * 30) + 10;
                const menWithAlcohol = Math.floor(Math.random() * 40) + 15; // Entrée + Alcool
                const womenWithAlcohol = Math.floor(Math.random() * 40) + 15;
                const menWithBottle = Math.floor(Math.random() * 20) + 5; // Entrée avec Bouteille
                const womenWithBottle = Math.floor(Math.random() * 20) + 5;
                const menOffPeak = Math.floor(Math.random() * 25) + 10; // Heure Creuse
                const womenOffPeak = Math.floor(Math.random() * 25) + 10;
                const menWithSoft = Math.floor(Math.random() * 35) + 10; // Entrée + Soft
                const womenWithSoft = Math.floor(Math.random() * 35) + 10;

                const totalNoDrink = menNoDrink + womenNoDrink;
                const totalWithAlcohol = menWithAlcohol + womenWithAlcohol;
                const totalWithBottle = menWithBottle + womenWithBottle;
                const totalOffPeak = menOffPeak + womenOffPeak;
                const totalWithSoft = menWithSoft + womenWithSoft;

                const totalMenEntry = menNoDrink + menWithAlcohol + menWithBottle + menOffPeak + menWithSoft;
                const totalWomenEntry = womenNoDrink + womenWithAlcohol + womenWithBottle + womenOffPeak + womenWithSoft;
                const totalEntry = totalMenEntry + totalWomenEntry;

                const menVestiaire = Math.floor(Math.random() * 30) + 20;
                const womenVestiaire = Math.floor(Math.random() * 30) + 20;
                return {
                    date: `2025-03-${String(i + 1).padStart(2, '0')}`,
                    entry: {
                        noDrink: { men: menNoDrink, women: womenNoDrink, total: totalNoDrink },
                        withAlcohol: { men: menWithAlcohol, women: womenWithAlcohol, total: totalWithAlcohol },
                        withBottle: { men: menWithBottle, women: womenWithBottle, total: totalWithBottle },
                        offPeak: { men: menOffPeak, women: womenOffPeak, total: totalOffPeak },
                        withSoft: { men: menWithSoft, women: womenWithSoft, total: totalWithSoft },
                        total: { men: totalMenEntry, women: totalWomenEntry, total: totalEntry }
                    },
                    vestiaire: { men: menVestiaire, women: womenVestiaire, total: menVestiaire + womenVestiaire },
                    avgOccupancy: Math.round((totalEntry / 500) * 100) // Simulé avec une capacité max de 500
                };
            }),
            '2025-02': Array.from({ length: 28 }, (_, i) => {
                const menNoDrink = Math.floor(Math.random() * 30) + 10;
                const womenNoDrink = Math.floor(Math.random() * 30) + 10;
                const menWithAlcohol = Math.floor(Math.random() * 40) + 15;
                const womenWithAlcohol = Math.floor(Math.random() * 40) + 15;
                const menWithBottle = Math.floor(Math.random() * 20) + 5;
                const womenWithBottle = Math.floor(Math.random() * 20) + 5;
                const menOffPeak = Math.floor(Math.random() * 25) + 10;
                const womenOffPeak = Math.floor(Math.random() * 25) + 10;
                const menWithSoft = Math.floor(Math.random() * 35) + 10;
                const womenWithSoft = Math.floor(Math.random() * 35) + 10;

                const totalNoDrink = menNoDrink + womenNoDrink;
                const totalWithAlcohol = menWithAlcohol + womenWithAlcohol;
                const totalWithBottle = menWithBottle + womenWithBottle;
                const totalOffPeak = menOffPeak + womenOffPeak;
                const totalWithSoft = menWithSoft + womenWithSoft;

                const totalMenEntry = menNoDrink + menWithAlcohol + menWithBottle + menOffPeak + menWithSoft;
                const totalWomenEntry = womenNoDrink + womenWithAlcohol + womenWithBottle + womenOffPeak + womenWithSoft;
                const totalEntry = totalMenEntry + totalWomenEntry;

                const menVestiaire = Math.floor(Math.random() * 30) + 20;
                const womenVestiaire = Math.floor(Math.random() * 30) + 20;
                return {
                    date: `2025-02-${String(i + 1).padStart(2, '0')}`,
                    entry: {
                        noDrink: { men: menNoDrink, women: womenNoDrink, total: totalNoDrink },
                        withAlcohol: { men: menWithAlcohol, women: womenWithAlcohol, total: totalWithAlcohol },
                        withBottle: { men: menWithBottle, women: womenWithBottle, total: totalWithBottle },
                        offPeak: { men: menOffPeak, women: womenOffPeak, total: totalOffPeak },
                        withSoft: { men: menWithSoft, women: womenWithSoft, total: totalWithSoft },
                        total: { men: totalMenEntry, women: totalWomenEntry, total: totalEntry }
                    },
                    vestiaire: { men: menVestiaire, women: womenVestiaire, total: menVestiaire + womenVestiaire },
                    avgOccupancy: Math.round((totalEntry / 500) * 100)
                };
            }),
            '2025-01': Array.from({ length: 31 }, (_, i) => {
                const menNoDrink = Math.floor(Math.random() * 30) + 10;
                const womenNoDrink = Math.floor(Math.random() * 30) + 10;
                const menWithAlcohol = Math.floor(Math.random() * 40) + 15;
                const womenWithAlcohol = Math.floor(Math.random() * 40) + 15;
                const menWithBottle = Math.floor(Math.random() * 20) + 5;
                const womenWithBottle = Math.floor(Math.random() * 20) + 5;
                const menOffPeak = Math.floor(Math.random() * 25) + 10;
                const womenOffPeak = Math.floor(Math.random() * 25) + 10;
                const menWithSoft = Math.floor(Math.random() * 35) + 10;
                const womenWithSoft = Math.floor(Math.random() * 35) + 10;

                const totalNoDrink = menNoDrink + womenNoDrink;
                const totalWithAlcohol = menWithAlcohol + womenWithAlcohol;
                const totalWithBottle = menWithBottle + womenWithBottle;
                const totalOffPeak = menOffPeak + womenOffPeak;
                const totalWithSoft = menWithSoft + womenWithSoft;

                const totalMenEntry = menNoDrink + menWithAlcohol + menWithBottle + menOffPeak + menWithSoft;
                const totalWomenEntry = womenNoDrink + womenWithAlcohol + womenWithBottle + womenOffPeak + womenWithSoft;
                const totalEntry = totalMenEntry + totalWomenEntry;

                const menVestiaire = Math.floor(Math.random() * 30) + 20;
                const womenVestiaire = Math.floor(Math.random() * 30) + 20;
                return {
                    date: `2025-01-${String(i + 1).padStart(2, '0')}`,
                    entry: {
                        noDrink: { men: menNoDrink, women: womenNoDrink, total: totalNoDrink },
                        withAlcohol: { men: menWithAlcohol, women: womenWithAlcohol, total: totalWithAlcohol },
                        withBottle: { men: menWithBottle, women: womenWithBottle, total: totalWithBottle },
                        offPeak: { men: menOffPeak, women: womenOffPeak, total: totalOffPeak },
                        withSoft: { men: menWithSoft, women: womenWithSoft, total: totalWithSoft },
                        total: { men: totalMenEntry, women: totalWomenEntry, total: totalEntry }
                    },
                    vestiaire: { men: menVestiaire, women: womenVestiaire, total: menVestiaire + womenVestiaire },
                    avgOccupancy: Math.round((totalEntry / 500) * 100)
                };
            })
        };

        // Données simulées pour le taux d'occupation annuel (moyenne mensuelle)
        const yearlyData = Array.from({ length: 12 }, (_, i) => {
            const month = String(i + 1).padStart(2, '0');
            const monthKey = `2025-${month}`;
            const monthData = occupancyData[monthKey] || [];
            const avgEntryMen = monthData.length ? Math.round(monthData.reduce((sum, d) => sum + d.entry.men, 0) / monthData.length) : 0;
            const avgEntryWomen = monthData.length ? Math.round(monthData.reduce((sum, d) => sum + d.entry.women, 0) / monthData.length) : 0;
            const avgVestiaireMen = monthData.length ? Math.round(monthData.reduce((sum, d) => sum + d.vestiaire.men, 0) / monthData.length) : 0;
            const avgVestiaireWomen = monthData.length ? Math.round(monthData.reduce((sum, d) => sum + d.vestiaire.women, 0) / monthData.length) : 0;
            const info = monthData.find(d => d.info !== '-')?.info || '-';
            return {
                month: monthKey,
                entry: { men: avgEntryMen, women: avgEntryWomen, total: avgEntryMen + avgEntryWomen },
                vestiaire: { men: avgVestiaireMen, women: avgVestiaireWomen, total: avgVestiaireMen + avgVestiaireWomen },
                info: info
            };
        });

        // Données simulées pour le chiffre d'affaires (CA) sur plusieurs années
        // Ces données seront mises à jour dynamiquement via la synchronisation avec le kiosque dans la 2ème partie
        const revenueData = {
            '2025': [
                { month: '2025-01', entry: 8000, vestiaire: 2000 },
                { month: '2025-02', entry: 9500, vestiaire: 2500 },
                { month: '2025-03', entry: 12000, vestiaire: 3000 },
                { month: '2025-04', entry: 10000, vestiaire: 2000 },
                { month: '2025-05', entry: 11000, vestiaire: 2200 },
                { month: '2025-06', entry: 9000, vestiaire: 1800 },
                { month: '2025-07', entry: 8500, vestiaire: 1700 },
                { month: '2025-08', entry: 7000, vestiaire: 1500 },
                { month: '2025-09', entry: 9500, vestiaire: 2000 },
                { month: '2025-10', entry: 10500, vestiaire: 2100 },
                { month: '2025-11', entry: 11500, vestiaire: 2300 },
                { month: '2025-12', entry: 12500, vestiaire: 2500 }
            ],
            '2024': [
                { month: '2024-01', entry: 7000, vestiaire: 1500 },
                { month: '2024-02', entry: 8500, vestiaire: 1800 },
                { month: '2024-03', entry: 9000, vestiaire: 2000 },
                { month: '2024-04', entry: 9500, vestiaire: 2100 },
                { month: '2024-05', entry: 10000, vestiaire: 2200 },
                { month: '2024-06', entry: 8000, vestiaire: 1600 },
                { month: '2024-07', entry: 7500, vestiaire: 1400 },
                { month: '2024-08', entry: 6500, vestiaire: 1300 },
                { month: '2024-09', entry: 8500, vestiaire: 1700 },
                { month: '2024-10', entry: 9500, vestiaire: 1900 },
                { month: '2024-11', entry: 10500, vestiaire: 2100 },
                { month: '2024-12', entry: 11000, vestiaire: 2200 }
            ],
            '2023': [
                { month: '2023-01', entry: 6000, vestiaire: 1200 },
                { month: '2023-02', entry: 7500, vestiaire: 1500 },
                { month: '2023-03', entry: 8000, vestiaire: 1600 },
                { month: '2023-04', entry: 8500, vestiaire: 1700 },
                { month: '2023-05', entry: 9000, vestiaire: 1800 },
                { month: '2023-06', entry: 7000, vestiaire: 1400 },
                { month: '2023-07', entry: 6500, vestiaire: 1300 },
                { month: '2023-08', entry: 6000, vestiaire: 1200 },
                { month: '2023-09', entry: 7500, vestiaire: 1500 },
                { month: '2023-10', entry: 8500, vestiaire: 1700 },
                { month: '2023-11', entry: 9500, vestiaire: 1900 },
                { month: '2023-12', entry: 10000, vestiaire: 2000 }
            ]
        };

        // === Variables globales ===
        let occupancyChart = null; // Instance du graphique Chart.js pour le taux d'occupation
        let revenueChart = null; // Instance du graphique Chart.js pour le CA
        let currentSelectedData = null; // Donnée actuellement sélectionnée (jour ou mois)
        let currentView = 'month'; // Vue actuelle ('month', 'hour', 'year')
        let selectedDayData = null; // Données du jour sélectionné pour la vue heure par heure
        const savedInfo = JSON.parse(localStorage.getItem('occupancyInfo')) || {}; // Informations sauvegardées pour le taux d'occupation

        // Charger les informations sauvegardées dans occupancyData et yearlyData
        Object.keys(occupancyData).forEach(month => {
            occupancyData[month].forEach(entry => {
                if (savedInfo[entry.date]) {
                    entry.info = savedInfo[entry.date];
                }
            });
        });
        yearlyData.forEach(entry => {
            if (savedInfo[entry.month]) {
                entry.info = savedInfo[entry.month];
            }
        });

        // Charger la capacité d'accueil depuis localStorage
        const savedCapacityMax = localStorage.getItem('capacityMax');
        if (savedCapacityMax) {
            document.getElementById('capacityMax').value = savedCapacityMax;
        }

        // Charger la jauge maximum du vestiaire depuis localStorage
        const savedVestiaireMax = localStorage.getItem('vestiaireMax');
        if (savedVestiaireMax) {
            document.getElementById('vestiaireMax').value = savedVestiaireMax;
        }

        // === Fonctions utilitaires ===
        /**
         * Calcule le jour de la semaine à partir d'une date.
         * @param {string} dateStr - La date au format 'YYYY-MM-DD'.
         * @returns {string} La première lettre du jour (ex. 'L' pour lundi).
         */
        function getDayInitial(dateStr) {
            const date = new Date(dateStr);
            const days = ['D', 'L', 'M', 'M', 'J', 'V', 'S']; // Dimanche, Lundi, ..., Samedi
            return days[date.getDay()];
        }

        /**
         * Calcule le taux d'occupation pour un ensemble de données.
         * @param {Object[]} data - Les données (jours, heures, ou mois).
         * @param {string} ticketType - Type de ticket ('entry' ou 'vestiaire').
         * @param {boolean} genderTotal - Afficher le total.
         * @param {boolean} genderMen - Afficher les hommes.
         * @param {boolean} genderWomen - Afficher les femmes.
         * @param {number} max - Capacité maximale (entrée ou vestiaire).
         * @returns {Object[]} Les datasets pour Chart.js.
         */
        function calculateOccupancyRates(data, ticketType, genderTotal, genderMen, genderWomen, max) {
            const datasets = [];
            if (genderTotal) {
                const rates = data.map(d => Math.round((d[ticketType].total / max) * 100));
                datasets.push({
                    label: `Taux d'occupation (${ticketType === 'entry' ? "Tickets d'entrée" : 'Tickets vestiaire'} - Total) (%)`,
                    data: rates,
                    borderColor: '#9733EE',
                    backgroundColor: 'rgba(151, 51, 238, 0.2)',
                    fill: true,
                });
            } else {
                if (genderMen) {
                    const rates = data.map(d => Math.round((d[ticketType].men / max) * 100));
                    datasets.push({
                        label: `Taux d'occupation (${ticketType === 'entry' ? "Tickets d'entrée" : 'Tickets vestiaire'} - Homme) (%)`,
                        data: rates,
                        borderColor: '#1E90FF',
                        backgroundColor: 'rgba(30, 144, 255, 0.2)',
                        fill: true,
                    });
                }
                if (genderWomen) {
                    const rates = data.map(d => Math.round((d[ticketType].women / max) * 100));
                    datasets.push({
                        label: `Taux d'occupation (${ticketType === 'entry' ? "Tickets d'entrée" : 'Tickets vestiaire'} - Femme) (%)`,
                        data: rates,
                        borderColor: '#FF69B4',
                        backgroundColor: 'rgba(255, 105, 180, 0.2)',
                        fill: true,
                    });
                }
            }
            return datasets;
        }

        /**
         * Exporte le contenu d'un onglet en PDF.
         * @param {string} tabId - L'ID de l'onglet à exporter.
         */
        function exportToPDF(tabId) {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();
            const table = document.querySelector(`#${tabId}Table table`);
            const chartCanvas = document.querySelector(`#${tabId} .chart-container canvas`);
            const filters = document.querySelector(`#${tabId} .filters`);

            doc.setFontSize(16);
            doc.text(document.querySelector(`#${tabId} h2`).textContent, 10, 10);

            let filterText = 'Filtres appliqués : ';
            filters.querySelectorAll('select, input:checked').forEach(el => {
                if (el.tagName === 'SELECT') {
                    filterText += `${el.previousElementSibling?.textContent || ''}${el.options[el.selectedIndex].text}, `;
                } else if (el.type === 'checkbox' || el.type === 'radio') {
                    filterText += `${el.nextElementSibling.textContent}, `;
                }
            });
            doc.setFontSize(12);
            doc.text(filterText, 10, 20);

            if (chartCanvas) {
                const chartImage = chartCanvas.toDataURL('image/png');
                doc.addImage(chartImage, 'PNG', 10, 30, 190, 100);
            }

            doc.autoTable({
                html: table,
                startY: chartCanvas ? 140 : 30,
                styles: { fontSize: 10 },
                headStyles: { fillColor: [151, 51, 238] },
                bodyStyles: { textColor: [51, 51, 51] }
            });

            doc.save(`${tabId}-report.pdf`);
        }

        // === Fonctions de données ===
        /**
         * Simule un appel API pour récupérer les données d'occupation.
         * @param {string} month - Le mois au format 'YYYY-MM'.
         * @returns {Promise<Object[]>} Les données d'occupation.
         */
        async function fetchOccupancyData(month) {
            const loader = document.getElementById('occupancyLoader');
            loader.style.display = 'flex';
            try {
                // Simuler un appel API (à remplacer par un vrai fetch)
                return new Promise(resolve => {
                    setTimeout(() => resolve(occupancyData[month] || []), 500);
                });
            } catch (error) {
                console.error('Erreur:', error);
                alert('Impossible de charger les données. Veuillez vérifier votre connexion.');
                return [];
            } finally {
                loader.style.display = 'none';
            }
        }

        /**
         * Simule un appel API pour récupérer les données des tickets.
         * @param {string} period - La période ('day', 'week', 'month').
         * @param {string} month - Le mois sélectionné (ex. '2025-03').
         * @param {string} week - La semaine sélectionnée (ex. '1').
         * @param {string} day - Le jour sélectionné (ex. '2025-03-25').
         * @param {string} entryType - Le type de ticket d'entrée sélectionné (ex. 'noDrink', 'withAlcohol', etc.).
         * @returns {Promise<Object>} Les données des tickets.
         */
        async function fetchTicketsData(period, month, week, day, entryType) {
            const loader = document.getElementById('ticketsLoader');
            loader.style.display = 'flex';
            try {
                // Simuler un appel API (à remplacer par un vrai fetch)
                return new Promise(resolve => {
                    setTimeout(() => {
                        let filteredData = ticketsData[month] || [];
                        let result = {
                            entry: {
                                noDrink: { men: 0, women: 0, total: 0 },
                                withAlcohol: { men: 0, women: 0, total: 0 },
                                withBottle: { men: 0, women: 0, total: 0 },
                                offPeak: { men: 0, women: 0, total: 0 },
                                withSoft: { men: 0, women: 0, total: 0 },
                                total: { men: 0, women: 0, total: 0 }
                            },
                            vestiaire: { men: 0, women: 0, total: 0 },
                            avgOccupancy: 0
                        };

                        if (period === 'day' && day) {
                            const dayData = filteredData.find(d => d.date === day);
                            if (dayData) {
                                result = {
                                    entry: dayData.entry,
                                    vestiaire: dayData.vestiaire,
                                    avgOccupancy: dayData.avgOccupancy
                                };
                            }
                        } else if (period === 'week' && week) {
                            const weekDays = filteredData.filter(d => {
                                const dayNum = parseInt(d.date.split('-')[2]);
                                const weekNum = Math.ceil(dayNum / 7);
                                return weekNum === parseInt(week);
                            });
                            if (weekDays.length > 0) {
                                // Calculer la moyenne pour chaque type de ticket d'entrée
                                result.entry.noDrink.men = Math.round(weekDays.reduce((sum, d) => sum + d.entry.noDrink.men, 0) / weekDays.length);
                                result.entry.noDrink.women = Math.round(weekDays.reduce((sum, d) => sum + d.entry.noDrink.women, 0) / weekDays.length);
                                result.entry.noDrink.total = result.entry.noDrink.men + result.entry.noDrink.women;

                                result.entry.withAlcohol.men = Math.round(weekDays.reduce((sum, d) => sum + d.entry.withAlcohol.men, 0) / weekDays.length);
                                result.entry.withAlcohol.women = Math.round(weekDays.reduce((sum, d) => sum + d.entry.withAlcohol.women, 0) / weekDays.length);
                                result.entry.withAlcohol.total = result.entry.withAlcohol.men + result.entry.withAlcohol.women;

                                result.entry.withBottle.men = Math.round(weekDays.reduce((sum, d) => sum + d.entry.withBottle.men, 0) / weekDays.length);
                                result.entry.withBottle.women = Math.round(weekDays.reduce((sum, d) => sum + d.entry.withBottle.women, 0) / weekDays.length);
                                result.entry.withBottle.total = result.entry.withBottle.men + result.entry.withBottle.women;

                                result.entry.offPeak.men = Math.round(weekDays.reduce((sum, d) => sum + d.entry.offPeak.men, 0) / weekDays.length);
                                result.entry.offPeak.women = Math.round(weekDays.reduce((sum, d) => sum + d.entry.offPeak.women, 0) / weekDays.length);
                                result.entry.offPeak.total = result.entry.offPeak.men + result.entry.offPeak.women;

                                result.entry.withSoft.men = Math.round(weekDays.reduce((sum, d) => sum + d.entry.withSoft.men, 0) / weekDays.length);
                                result.entry.withSoft.women = Math.round(weekDays.reduce((sum, d) => sum + d.entry.withSoft.women, 0) / weekDays.length);
                                result.entry.withSoft.total = result.entry.withSoft.men + result.entry.withSoft.women;

                                // Calculer le total global des entrées
                                result.entry.total.men = result.entry.noDrink.men + result.entry.withAlcohol.men + result.entry.withBottle.men + result.entry.offPeak.men + result.entry.withSoft.men;
                                result.entry.total.women = result.entry.noDrink.women + result.entry.withAlcohol.women + result.entry.withBottle.women + result.entry.offPeak.women + result.entry.withSoft.women;
                                result.entry.total.total = result.entry.total.men + result.entry.total.women;

                                // Calculer la moyenne des tickets vestiaire
                                result.vestiaire.men = Math.round(weekDays.reduce((sum, d) => sum + d.vestiaire.men, 0) / weekDays.length);
                                result.vestiaire.women = Math.round(weekDays.reduce((sum, d) => sum + d.vestiaire.women, 0) / weekDays.length);
                                result.vestiaire.total = result.vestiaire.men + result.vestiaire.women;

                                // Calculer le taux d'occupation moyen pour la semaine
                                result.avgOccupancy = Math.round(weekDays.reduce((sum, d) => sum + d.avgOccupancy, 0) / weekDays.length);
                            }
                        } else if (period === 'month') {
                            if (filteredData.length > 0) {
                                // Calculer la moyenne pour chaque type de ticket d'entrée sur le mois
                                result.entry.noDrink.men = Math.round(filteredData.reduce((sum, d) => sum + d.entry.noDrink.men, 0) / filteredData.length);
                                result.entry.noDrink.women = Math.round(filteredData.reduce((sum, d) => sum + d.entry.noDrink.women, 0) / filteredData.length);
                                result.entry.noDrink.total = result.entry.noDrink.men + result.entry.noDrink.women;

                                result.entry.withAlcohol.men = Math.round(filteredData.reduce((sum, d) => sum + d.entry.withAlcohol.men, 0) / filteredData.length);
                                result.entry.withAlcohol.women = Math.round(filteredData.reduce((sum, d) => sum + d.entry.withAlcohol.women, 0) / filteredData.length);
                                result.entry.withAlcohol.total = result.entry.withAlcohol.men + result.entry.withAlcohol.women;

                                result.entry.withBottle.men = Math.round(filteredData.reduce((sum, d) => sum + d.entry.withBottle.men, 0) / filteredData.length);
                                result.entry.withBottle.women = Math.round(filteredData.reduce((sum, d) => sum + d.entry.withBottle.women, 0) / filteredData.length);
                                result.entry.withBottle.total = result.entry.withBottle.men + result.entry.withBottle.women;

                                result.entry.offPeak.men = Math.round(filteredData.reduce((sum, d) => sum + d.entry.offPeak.men, 0) / filteredData.length);
                                result.entry.offPeak.women = Math.round(filteredData.reduce((sum, d) => sum + d.entry.offPeak.women, 0) / filteredData.length);
                                result.entry.offPeak.total = result.entry.offPeak.men + result.entry.offPeak.women;

                                result.entry.withSoft.men = Math.round(filteredData.reduce((sum, d) => sum + d.entry.withSoft.men, 0) / filteredData.length);
                                result.entry.withSoft.women = Math.round(filteredData.reduce((sum, d) => sum + d.entry.withSoft.women, 0) / filteredData.length);
                                result.entry.withSoft.total = result.entry.withSoft.men + result.entry.withSoft.women;

                                // Calculer le total global des entrées
                                result.entry.total.men = result.entry.noDrink.men + result.entry.withAlcohol.men + result.entry.withBottle.men + result.entry.offPeak.men + result.entry.withSoft.men;
                                result.entry.total.women = result.entry.noDrink.women + result.entry.withAlcohol.women + result.entry.withBottle.women + result.entry.offPeak.women + result.entry.withSoft.women;
                                result.entry.total.total = result.entry.total.men + result.entry.total.women;

                                // Calculer la moyenne des tickets vestiaire
                                result.vestiaire.men = Math.round(filteredData.reduce((sum, d) => sum + d.vestiaire.men, 0) / filteredData.length);
                                result.vestiaire.women = Math.round(filteredData.reduce((sum, d) => sum + d.vestiaire.women, 0) / filteredData.length);
                                result.vestiaire.total = result.vestiaire.men + result.vestiaire.women;

                                // Calculer le taux d'occupation moyen pour le mois
                                result.avgOccupancy = Math.round(filteredData.reduce((sum, d) => sum + d.avgOccupancy, 0) / filteredData.length);
                            }
                        }

                        // Résoudre la promesse avec les données calculées
                        resolve(result);
                    }, 500); // Simuler un délai de 500ms pour imiter une requête API
                });
            } catch (error) {
                // Gestion des erreurs : afficher une alerte en cas de problème
                console.error('Erreur:', error);
                alert('Impossible de charger les données des tickets. Veuillez vérifier votre connexion.');
                // Retourner des valeurs par défaut en cas d'erreur
                return {
                    entry: {
                        noDrink: { men: 0, women: 0, total: 0 },
                        withAlcohol: { men: 0, women: 0, total: 0 },
                        withBottle: { men: 0, women: 0, total: 0 },
                        offPeak: { men: 0, women: 0, total: 0 },
                        withSoft: { men: 0, women: 0, total: 0 },
                        total: { men: 0, women: 0, total: 0 }
                    },
                    vestiaire: { men: 0, women: 0, total: 0 },
                    avgOccupancy: 0
                };
            } finally {
                // Cacher le loader une fois le chargement terminé (succès ou échec)
                loader.style.display = 'none';
            }
        }

        /**
         * Simule un appel API pour récupérer les données du chiffre d'affaires (CA).
         * @param {string} year - L'année sélectionnée (ex. '2025').
         * @param {string} mode - Le mode de sélection ('range' pour période, 'single' pour mois unique).
         * @param {string} fromMonth - Le mois de début (ex. '2025-01') pour le mode 'range'.
         * @param {string} toMonth - Le mois de fin (ex. '2025-03') pour le mode 'range'.
         * @param {string} singleMonth - Le mois unique sélectionné (ex. '2025-03') pour le mode 'single'.
         * @returns {Promise<Object[]>} Les données du CA filtrées.
         */
        async function fetchRevenueData(year, mode, fromMonth, toMonth, singleMonth) {
            const loader = document.getElementById('revenueLoader');
            loader.style.display = 'flex';
            try {
                // Simuler un appel API (à remplacer par un vrai fetch)
                return new Promise(resolve => {
                    setTimeout(() => {
                        let filteredData = revenueData[year] || [];
                        if (mode === 'range') {
                            // Filtrer les données pour la période "De - À"
                            filteredData = filteredData.filter(d => {
                                const monthDate = new Date(d.month);
                                const fromDate = new Date(fromMonth);
                                const toDate = new Date(toMonth);
                                return monthDate >= fromDate && monthDate <= toDate;
                            });
                        } else if (mode === 'single') {
                            // Filtrer les données pour un mois unique
                            filteredData = filteredData.filter(d => d.month === singleMonth);
                        }
                        resolve(filteredData);
                    }, 500); // Simuler un délai de 500ms
                });
            } catch (error) {
                console.error('Erreur:', error);
                alert('Impossible de charger les données du CA. Veuillez vérifier votre connexion.');
                return [];
            } finally {
                loader.style.display = 'none';
            }
        }

        // === Fonctions de l'interface utilisateur ===
        /**
         * Ouvre un onglet spécifique.
         * @param {string} tabId - L'ID de l'onglet à ouvrir.
         */
        function openTab(tabId) {
            document.querySelectorAll('.tab-content').forEach(content => {
                content.classList.remove('active');
            });
            document.querySelectorAll('.tab').forEach(tab => {
                tab.classList.remove('active');
            });
            document.getElementById(tabId).classList.add('active');
            document.querySelector(`button[onclick="openTab('${tabId}')"]`).classList.add('active');
            // Mettre à jour les données de l'onglet activé
            if (tabId === 'occupancy') {
                updateOccupancyChart();
            } else if (tabId === 'tickets') {
                updateTicketsReport();
            } else if (tabId === 'revenue') {
                updateRevenueReport();
            }
        }

        /**
         * Met à jour la capacité d'accueil et sauvegarde la valeur dans localStorage.
         */
        function updateCapacity() {
            const capacityMaxInput = document.getElementById('capacityMax');
            let max = parseInt(capacityMaxInput.value);
            if (isNaN(max) || max < 1) {
                alert('Veuillez entrer une capacité maximale valide (minimum 1).');
                capacityMaxInput.value = localStorage.getItem('capacityMax') || 500;
                return;
            }
            localStorage.setItem('capacityMax', max);
            updateOccupancyChart();
            updateTicketsReport(); // Met à jour le rapport des tickets pour recalculer les taux d'occupation
        }

        /**
         * Met à jour la sélection des genres pour le graphique du taux d'occupation.
         * - Si "Total" est coché, désélectionne "Homme" et "Femme".
         * - Si "Homme" ou "Femme" est coché, désélectionne "Total".
         * - Si aucune case n'est cochée, coche "Total" par défaut.
         */
        function updateGenderSelection() {
            const genderTotal = document.getElementById('genderTotal');
            const genderMen = document.getElementById('genderMen');
            const genderWomen = document.getElementById('genderWomen');

            // Récupérer l'élément qui a déclenché l'événement
            const target = event.target;

            // Si l'utilisateur coche "Total"
            if (target.id === 'genderTotal' && genderTotal.checked) {
                genderMen.checked = false;
                genderWomen.checked = false;
            } 
            // Si l'utilisateur coche "Homme" ou "Femme"
            else if (target.id === 'genderMen' || target.id === 'genderWomen') {
                if (genderMen.checked || genderWomen.checked) {
                    genderTotal.checked = false;
                }
                if (!genderMen.checked && !genderWomen.checked) {
                    genderTotal.checked = true;
                }
            }

            updateOccupancyChart();
        }

        /**
         * Retourne à la vue par mois dans l'onglet "Taux d'occupation".
         */
        function backToMonthView() {
            currentView = 'month';
            selectedDayData = null;
            document.getElementById('backBtn').style.display = 'none';
            document.getElementById('periodSelect').value = 'month';
            updateOccupancyChart();
        }

        /**
         * Sauvegarde l'information saisie dans l'onglet "Taux d'occupation".
         */
        function saveInfo() {
            if (currentSelectedData) {
                const newText = document.getElementById('detailInfo').value || '-';
                if (currentSelectedData.type === 'day') {
                    currentSelectedData.data.info = newText;
                    savedInfo[currentSelectedData.data.date] = newText;
                    const tableBody = document.getElementById('occupancyTableBody');
                    const row = tableBody.rows[currentSelectedData.index];
                    row.cells[2].textContent = newText;
                } else if (currentSelectedData.type === 'month') {
                    currentSelectedData.data.info = newText;
                    savedInfo[currentSelectedData.data.month] = newText;
                    const tableBody = document.getElementById('occupancyTableBody');
                    const row = tableBody.rows[currentSelectedData.index];
                    row.cells[2].textContent = newText;
                }
                localStorage.setItem('occupancyInfo', JSON.stringify(savedInfo));
            }
        }

        /**
         * Affiche la modale d'annulation dans l'onglet "Historique tickets".
         */
        function showCancelModal() {
            document.getElementById('cancelModal').style.display = 'flex';
        }

        /**
         * Ferme la modale d'annulation.
         */
        function closeCancelModal() {
            document.getElementById('cancelModal').style.display = 'none';
            document.getElementById('cancelReason').value = '';
        }

        /**
         * Confirme l'annulation d'un ticket dans l'onglet "Historique tickets".
         */
        function confirmCancel() {
            const reason = document.getElementById('cancelReason').value;
            if (reason) {
                const table = document.querySelector('#historyTable tbody');
                const row = table.querySelector('tr');
                if (row) {
                    row.cells[4].textContent = `Annulé (Raison : ${reason})`;
                }
                closeCancelModal();
            } else {
                alert('Veuillez entrer une raison pour l\'annulation.');
            }
        }

        /**
         * Met à jour les options des jours et des semaines en fonction du mois sélectionné dans l'onglet "Rapport tickets".
         */
        function updateTicketDays() {
            const month = document.getElementById('ticketMonth').value;
            const period = document.getElementById('ticketPeriod').value;
            const daySelect = document.getElementById('ticketDay');
            const weekSelect = document.getElementById('ticketWeek');

            daySelect.disabled = period !== 'day';
            weekSelect.disabled = period !== 'week';

            const [year, monthNum] = month.split('-').map(Number);
            const daysInMonth = new Date(year, monthNum, 0).getDate();

            daySelect.innerHTML = '<option value="">Sélectionner un jour</option>';
            for (let i = 1; i <= daysInMonth; i++) {
                const dayStr = String(i).padStart(2, '0');
                const option = document.createElement('option');
                option.value = `${month}-${dayStr}`;
                option.textContent = `Jour ${i}`;
                daySelect.appendChild(option);
            }

            const numWeeks = Math.ceil(daysInMonth / 7);
            weekSelect.innerHTML = '<option value="">Sélectionner une semaine</option>';
            for (let i = 1; i <= numWeeks; i++) {
                const option = document.createElement('option');
                option.value = i;
                option.textContent = `Semaine ${i}`;
                weekSelect.appendChild(option);
            }
        }

        /**
         * Bascule entre les filtres de période (De - À) et de mois unique dans l'onglet "Rapport CA".
         */
        function toggleRevenueFilters() {
            const mode = document.getElementById('revenueMode').value;
            const rangeFilters = document.getElementById('rangeFilters');
            const singleMonthFilter = document.getElementById('singleMonthFilter');

            if (mode === 'range') {
                rangeFilters.style.display = 'flex';
                singleMonthFilter.style.display = 'none';
            } else {
                rangeFilters.style.display = 'none';
                singleMonthFilter.style.display = 'flex';
            }
            updateRevenueReport();
        }

        /**
         * Met à jour les options des sélecteurs de mois en fonction de l'année sélectionnée.
         * Cette fonction remplit les sélecteurs "De", "À" et "Mois unique" dans l'onglet "Rapport CA".
         */
        function updateRevenueFilters() {
            const year = document.getElementById('revenueYear').value;
            const fromMonthSelect = document.getElementById('revenueFromMonth');
            const toMonthSelect = document.getElementById('revenueToMonth');
            const singleMonthSelect = document.getElementById('revenueSingleMonth');

            // Liste des mois disponibles pour l'année sélectionnée
            const months = revenueData[year] ? revenueData[year].map(d => d.month) : [];
            fromMonthSelect.innerHTML = '';
            toMonthSelect.innerHTML = '';
            singleMonthSelect.innerHTML = '';

            months.forEach(month => {
                const option1 = document.createElement('option');
                const option2 = document.createElement('option');
                const option3 = document.createElement('option');
                const monthName = new Date(month).toLocaleString('fr-FR', { month: 'long', year: 'numeric' });
                option1.value = month;
                option1.textContent = monthName;
                option2.value = month;
                option2.textContent = monthName;
                option3.value = month;
                option3.textContent = monthName;
                fromMonthSelect.appendChild(option1);
                toMonthSelect.appendChild(option2);
                singleMonthSelect.appendChild(option3);
            });

            // Sélectionner par défaut le premier et le dernier mois pour la période
            if (months.length > 0) {
                fromMonthSelect.value = months[0];
                toMonthSelect.value = months[months.length - 1];
                singleMonthSelect.value = months[months.length - 1];
            }

            updateRevenueReport();
        }

        /**
         * Met à jour la jauge du vestiaire dans l'onglet "Rapport tickets".
         */
        function updateVestiaireGauge() {
            const vestiaireMaxInput = document.getElementById('vestiaireMax');
            let max = parseInt(vestiaireMaxInput.value);
            if (isNaN(max) || max < 1) {
                alert('Veuillez entrer une jauge maximale valide (minimum 1).');
                vestiaireMaxInput.value = localStorage.getItem('vestiaireMax') || 100;
                return;
            }
            localStorage.setItem('vestiaireMax', max);

            const period = document.getElementById('ticketPeriod').value;
            const month = document.getElementById('ticketMonth').value;
            const week = document.getElementById('ticketWeek').value;
            const day = document.getElementById('ticketDay').value;
            const entryType = document.getElementById('entryTypeSelect').value;

            fetchTicketsData(period, month, week, day, entryType).then(data => {
                const progress = document.getElementById('vestiaireProgress');
                const text = document.getElementById('vestiaireText');
                const value = data.vestiaire.total;
                progress.max = max;
                progress.value = value;

                // Mettre à jour la couleur de la jauge en fonction du taux d'utilisation
                const percentage = (value / max) * 100;
                progress.className = '';
                if (percentage >= 90) {
                    progress.classList.add('danger');
                } else if (percentage >= 70) {
                    progress.classList.add('warning');
                }

                text.textContent = `${value}/${max} cintres utilisés (maximum recommandé : ${max})`;
            });
        }

        // === Fonctions de mise à jour des graphiques et tableaux ===
        /**
         * Met à jour le graphique et le tableau du taux d'occupation dans l'onglet "Taux d'occupation".
         */
        async function updateOccupancyChart() {
            const month = document.getElementById('monthSelect').value;
            const period = document.getElementById('periodSelect').value;
            const ticketType = document.getElementById('ticketTypeSelect').value;
            const genderTotal = document.getElementById('genderTotal').checked;
            const genderMen = document.getElementById('genderMen').checked;
            const genderWomen = document.getElementById('genderWomen').checked;
            const capacityMax = parseInt(document.getElementById('capacityMax').value);
            const vestiaireMax = parseInt(document.getElementById('vestiaireMax').value);
            const max = ticketType === 'entry' ? capacityMax : vestiaireMax;

            let data, labels, tableData;
            if (period === 'month') {
                currentView = 'month';
                data = await fetchOccupancyData(month);
                labels = data.map(d => {
                    const day = d.date.split('-')[2];
                    const dayInitial = getDayInitial(d.date);
                    return `${day} (${dayInitial})`;
                });
                tableData = data.map(d => ({
                    date: d.date,
                    rate: Math.round((d[ticketType].total / max) * 100) + '%',
                    info: d.info
                }));
            } else if (period === 'hour' && selectedDayData) {
                currentView = 'hour';
                data = selectedDayData.hourlyData;
                labels = data.map(d => d.hour);
                tableData = data.map(d => ({
                    date: d.hour,
                    rate: Math.round((d[ticketType].total / max) * 100) + '%',
                    info: '-'
                }));
            } else if (period === 'year') {
                currentView = 'year';
                data = yearlyData;
                labels = data.map(d => {
                    const monthName = new Date(d.month).toLocaleString('fr-FR', { month: 'short' });
                    return monthName;
                });
                tableData = data.map(d => ({
                    date: d.month,
                    rate: Math.round((d[ticketType].total / max) * 100) + '%',
                    info: d.info
                }));
            } else {
                return; // Pas de données à afficher
            }

            const datasets = calculateOccupancyRates(data, ticketType, genderTotal, genderMen, genderWomen, max);

            // Mettre à jour le tableau
            const tableBody = document.getElementById('occupancyTableBody');
            tableBody.innerHTML = '';
            tableData.forEach((row, index) => {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td>${row.date}</td>
                    <td>${row.rate}</td>
                    <td class="editable">${row.info}</td>
                `;
                tr.cells[2].addEventListener('click', () => showChartDetails(row, index, period === 'year' ? 'month' : 'day'));
                tableBody.appendChild(tr);
            });

            // Mettre à jour le graphique
            const ctx = document.getElementById('occupancyChart').getContext('2d');
            if (occupancyChart) {
                occupancyChart.destroy();
            }
            occupancyChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: datasets
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 100,
                            title: {
                                display: true,
                                text: 'Taux d\'occupation (%)'
                            }
                        },
                        x: {
                            title: {
                                display: true,
                                text: period === 'hour' ? 'Heure' : period === 'year' ? 'Mois' : 'Jour'
                            }
                        }
                    },
                    onClick: (event, elements) => {
                        if (elements.length > 0) {
                            const index = elements[0].index;
                            if (currentView === 'month') {
                                currentView = 'hour';
                                selectedDayData = data[index];
                                document.getElementById('periodSelect').value = 'hour';
                                document.getElementById('backBtn').style.display = 'block';
                                updateOccupancyChart();
                            }
                        }
                    }
                }
            });

            // Mettre à jour le tableau de bord
            const totalOccupancy = data.reduce((sum, d) => sum + d.entry.total, 0) / data.length;
            const avgOccupancyRate = Math.round((totalOccupancy / capacityMax) * 100);
            document.getElementById('dashboardOccupancy').textContent = `${avgOccupancyRate}%`;
        }

        /**
         * Affiche les détails d'un point de données dans l'onglet "Taux d'occupation".
         * @param {Object} data - Les données du point (jour ou mois).
         * @param {number} index - L'index du point dans le tableau.
         * @param {string} type - Le type de données ('day' ou 'month').
         */
        function showChartDetails(data, index, type) {
            currentSelectedData = { data, index, type };
            document.getElementById('chartDetails').style.display = 'block';
            document.getElementById('detailDate').textContent = data.date;
            document.getElementById('detailRate').textContent = data.rate;
            document.getElementById('detailInfo').value = data.info;
        }

        /**
         * Met à jour le rapport des tickets dans l'onglet "Rapport tickets".
         */
        async function updateTicketsReport() {
            const period = document.getElementById('ticketPeriod').value;
            const month = document.getElementById('ticketMonth').value;
            const week = document.getElementById('ticketWeek').value;
            const day = document.getElementById('ticketDay').value;
            const entryType = document.getElementById('entryTypeSelect').value;

            // Activer/désactiver les sélecteurs de semaine et de jour en fonction de la période
            document.getElementById('ticketWeek').disabled = period !== 'week';
            document.getElementById('ticketDay').disabled = period !== 'day';

            const data = await fetchTicketsData(period, month, week, day, entryType);

            // Mettre à jour le taux d'occupation moyen
            document.getElementById('occupancyImpact').textContent = `Taux d'occupation moyen : ${data.avgOccupancy}%`;

            // Mettre à jour la jauge du vestiaire
            updateVestiaireGauge();

            // Mettre à jour le tableau des tickets
            const tableBody = document.querySelector('#ticketsTable tbody');
            tableBody.innerHTML = '';

            const entryTypes = [
                { key: 'noDrink', label: 'Entrée sans Boisson' },
                { key: 'withAlcohol', label: 'Entrée + Alcool' },
                { key: 'withBottle', label: 'Entrée avec Bouteille' },
                { key: 'offPeak', label: 'Heure Creuse' },
                { key: 'withSoft', label: 'Entrée + Soft' },
                { key: 'total', label: 'Total Entrées' }
            ];

            // Afficher uniquement le type d'entrée sélectionné ou tous si "all" est sélectionné
            const typesToShow = entryType === 'all' ? entryTypes : entryTypes.filter(type => type.key === entryType || type.key === 'total');

            typesToShow.forEach(type => {
                const row = document.createElement('tr');
                const impact = type.key === 'total' ? data.avgOccupancy : Math.round((data.entry[type.key].total / parseInt(document.getElementById('capacityMax').value)) * 100);
                row.innerHTML = `
                    <td>${type.label}</td>
                    <td>${data.entry[type.key].men}</td>
                    <td>${data.entry[type.key].women}</td>
                    <td>${data.entry[type.key].total}</td>
                    <td>${impact}%</td>
                `;
                tableBody.appendChild(row);
            });

            const vestiaireRow = document.createElement('tr');
            const vestiaireImpact = Math.round((data.vestiaire.total / parseInt(document.getElementById('vestiaireMax').value)) * 100);
            vestiaireRow.innerHTML = `
                <td>Vestiaire</td>
                <td>${data.vestiaire.men}</td>
                <td>${data.vestiaire.women}</td>
                <td>${data.vestiaire.total}</td>
                <td>${vestiaireImpact}%</td>
            `;
            tableBody.appendChild(vestiaireRow);

            // Mettre à jour le tableau de bord
            document.getElementById('dashboardTickets').textContent = data.entry.total.total;
            document.getElementById('vestiaireUsage').textContent = `${data.vestiaire.total}/${document.getElementById('vestiaireMax').value}`;
        }

        /**
         * Met à jour le rapport du chiffre d'affaires dans l'onglet "Rapport CA".
         */
        async function updateRevenueReport() {
            const year = document.getElementById('revenueYear').value;
            const mode = document.getElementById('revenueMode').value;
            const fromMonth = document.getElementById('revenueFromMonth').value;
            const toMonth = document.getElementById('revenueToMonth').value;
            const singleMonth = document.getElementById('revenueSingleMonth').value;

            const data = await fetchRevenueData(year, mode, fromMonth, toMonth, singleMonth);

            // Calculer le total du CA
            const totalRevenue = data.reduce((sum, d) => sum + d.entry + d.vestiaire, 0);
            document.getElementById('revenueTotal').textContent = `Total : ${totalRevenue.toLocaleString('fr-FR')}€`;

            // Mettre à jour le tableau
            const tableBody = document.getElementById('revenueTableBody');
            tableBody.innerHTML = '';
            let previousTotal = null;
            data.forEach(d => {
                const total = d.entry + d.vestiaire;
                let comparison = '-';
                if (previousTotal !== null) {
                    const diff = total - previousTotal;
                    const percentage = previousTotal !== 0 ? ((diff / previousTotal) * 100).toFixed(1) : 0;
                    comparison = diff >= 0 ? `+${diff}€ (+${percentage}%)` : `${diff}€ (${percentage}%)`;
                }
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${new Date(d.month).toLocaleString('fr-FR', { month: 'long', year: 'numeric' })}</td>
                    <td>${d.entry.toLocaleString('fr-FR')}€</td>
                    <td>${d.vestiaire.toLocaleString('fr-FR')}€</td>
                    <td>${total.toLocaleString('fr-FR')}€</td>
                    <td class="${previousTotal !== null ? (total >= previousTotal ? 'positive' : 'negative') : ''}">${comparison}</td>
                `;
                tableBody.appendChild(row);
                previousTotal = total;
            });

            // Mettre à jour le graphique
            const labels = data.map(d => new Date(d.month).toLocaleString('fr-FR', { month: 'short' }));
            const entryData = data.map(d => d.entry);
            const vestiaireData = data.map(d => d.vestiaire);

            const ctx = document.getElementById('revenueChart').getContext('2d');
            if (revenueChart) {
                revenueChart.destroy();
            }
            revenueChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: 'Entrées (€)',
                            data: entryData,
                            backgroundColor: '#9733EE',
                        },
                        {
                            label: 'Vestiaire (€)',
                            data: vestiaireData,
                            backgroundColor: '#DA22FF',
                        }
                    ]
                },
                options: {
                    responsive: true,
                    scales: {
                        x: {
                            stacked: true,
                            title: {
                                display: true,
                                text: 'Mois'
                            }
                        },
                        y: {
                            stacked: true,
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Chiffre d\'affaires (€)'
                            }
                        }
                    }
                }
            });

            // Mettre à jour le tableau de bord
            document.getElementById('dashboardRevenue').textContent = `${totalRevenue.toLocaleString('fr-FR')}€`;
        }

        // === Synchronisation avec le kiosque ===
        /**
         * Synchronise les données avec le kiosque en temps réel.
         * Cette fonction utilise une API fictive pour récupérer les données actualisées.
         * Dans un environnement réel, remplacez l'URL et la logique par une vraie API.
         */
        async function syncWithKiosk() {
            try {
                // Simuler une requête API vers le kiosque (à remplacer par une vraie API)
                const response = await fetch('https://api-kiosk.example.com/sync', {
                    method: 'GET',
                    headers: {
                        'Authorization': 'Bearer YOUR_API_TOKEN', // Remplacer par un vrai token
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) {
                    throw new Error('Erreur lors de la synchronisation avec le kiosque');
                }

                const kioskData = await response.json();

                // Mettre à jour ticketsData avec les données du kiosque
                Object.keys(kioskData.tickets).forEach(month => {
                    if (!ticketsData[month]) {
                        ticketsData[month] = [];
                    }
                    kioskData.tickets[month].forEach(dayData => {
                        const existingDay = ticketsData[month].find(d => d.date === dayData.date);
                        if (existingDay) {
                            // Mettre à jour les données existantes
                            existingDay.entry = dayData.entry;
                            existingDay.vestiaire = dayData.vestiaire;
                            existingDay.avgOccupancy = dayData.avgOccupancy;
                        } else {
                            // Ajouter une nouvelle entrée
                            ticketsData[month].push(dayData);
                        }
                    });
                });

                // Mettre à jour revenueData avec les données du kiosque
                Object.keys(kioskData.revenue).forEach(year => {
                    if (!revenueData[year]) {
                        revenueData[year] = [];
                    }
                    kioskData.revenue[year].forEach(monthData => {
                        const existingMonth = revenueData[year].find(d => d.month === monthData.month);
                        if (existingMonth) {
                            // Mettre à jour les données existantes
                            existingMonth.entry = monthData.entry;
                            existingMonth.vestiaire = monthData.vestiaire;
                        } else {
                            // Ajouter une nouvelle entrée
                            revenueData[year].push(monthData);
                        }
                    });
                });

                // Rafraîchir les rapports après la synchronisation
                updateTicketsReport();
                updateRevenueReport();
                updateOccupancyChart();

                console.log('Synchronisation avec le kiosque réussie');
            } catch (error) {
                console.error('Erreur lors de la synchronisation avec le kiosque:', error);
                alert('Impossible de synchroniser avec le kiosque. Veuillez vérifier votre connexion.');
            }
        }

        /**
         * Configure une synchronisation périodique avec le kiosque toutes les 5 minutes.
         */
        function setupKioskSync() {
            // Synchronisation initiale
            syncWithKiosk();

            // Synchronisation toutes les 5 minutes (300 000 ms)
            setInterval(syncWithKiosk, 300000);
        }

        // === Initialisation ===
        // Initialiser les filtres et les rapports au chargement de la page
        document.addEventListener('DOMContentLoaded', () => {
            updateOccupancyChart();
            updateTicketsReport();
            updateRevenueFilters();
            updateRevenueReport();
            updateTicketDays();

            // Lancer la synchronisation avec le kiosque
            setupKioskSync();
        });
    </script>
</body>
</html>
