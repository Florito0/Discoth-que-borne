<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestion des Accès Soirée - Discothèque</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Roboto', sans-serif;
        }
        
        body {
            background-color: #121212;
            color: #ffffff;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            background-color: #1e1e1e;
            border-radius: 12px;
            width: 100%;
            max-width: 1000px;
            overflow: hidden;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
        }
        
        .access-section {
            padding: 20px;
        }
        
        .header-content {
            background-color: #2c2c2c;
            padding: 20px;
            text-align: center;
            border-bottom: 1px solid #333;
            margin-bottom: 20px;
        }
        
        h1 {
            font-size: 24px;
            font-weight: 700;
            margin-bottom: 8px;
        }
        
        .subtitle {
            font-size: 16px;
            color: #b3b3b3;
        }
        
        .current-prestations {
            margin-bottom: 20px;
            padding: 15px;
            background: linear-gradient(135deg, #1c2526 0%, #2a3b4c 100%);
            border-radius: 8px;
        }
        
        .day-filter {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
            margin-bottom: 15px;
        }
        
        .day-btn, .preview-btn {
            padding: 5px 10px;
            background: #444;
            border: 1px solid #333;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        
        .day-btn:hover, .preview-btn:hover {
            background: #555;
        }
        
        .day-btn.active, .preview-btn.active {
            background: linear-gradient(to right, #9733EE, #DA22FF);
            border: 1px solid #333;
        }
        
        .prestation-container {
            margin-bottom: 20px;
        }
        
        /* Ligne de séparation bleu électrique */
        .separator-line {
            height: 2px;
            background-color: #00D4FF;
            margin: 10px 0;
        }
        
        .prestation-item {
            display: flex;
            flex-direction: column;
            padding: 10px;
            border-bottom: 1px solid #444;
            cursor: move;
            user-select: none;
        }
        
        .prestation-item.dragging {
            opacity: 0.5;
        }
        
        .prestation-item:last-child {
            border-bottom: none;
        }
        
        .prestation-details {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr 1fr 1fr;
            gap: 5px;
        }
        
        .prestation-details div {
            padding: 2px;
        }
        
        .delete-btn {
            width: 32px;
            height: 32px;
            background-color: #ff4444;
            border: none;
            border-radius: 50%;
            color: white;
            font-size: 16px;
            cursor: pointer;
            display: flex;
            justify-content: center;
            align-items: center;
            transition: box-shadow 0.3s, transform 0.3s;
            margin-left: 10px;
        }
        
        .delete-btn:hover {
            box-shadow: 0 0 10px #ff4444, 0 0 5px #00D4FF;
            transform: scale(1.1);
        }
        
        .delete-btn:active {
            transform: scale(0.95);
        }
        
        .edit-btn {
            width: 32px;
            height: 32px;
            background-color: #9733EE;
            border: none;
            border-radius: 50%;
            color: white;
            font-size: 16px;
            cursor: pointer;
            display: flex;
            justify-content: center;
            align-items: center;
            transition: box-shadow 0.3s, transform 0.3s;
        }
        
        .edit-btn:hover {
            box-shadow: 0 0 10px #9733EE, 0 0 5px #00D4FF;
            transform: scale(1.1);
        }
        
        .edit-btn:active {
            transform: scale(0.95);
        }
        
        .access-form {
            margin-bottom: 20px;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        label {
            display: block;
            margin-bottom: 3px;
            font-weight: 500;
        }
        
        input, select {
            padding: 10px;
            background-color: #333;
            border: 1px solid #333;
            color: white;
            border-radius: 4px;
            width: 100%;
            max-width: 300px;
            transition: background-color 0.3s, box-shadow 0.3s;
        }
        
        input:hover, select:hover, input:focus, select:focus {
            background-color: #444;
            box-shadow: 0 0 5px #00D4FF;
            outline: none;
        }
        
        .days-checkboxes {
            display: flex;
            gap: 15px;
            flex-wrap: nowrap;
            overflow-x: auto;
            padding: 5px;
        }
        
        .days-checkboxes.error {
            border: 2px solid #ff4444;
            border-radius: 4px;
        }
        
        .days-checkboxes label {
            display: flex;
            align-items: center;
            gap: 5px;
            white-space: nowrap;
        }
        
        .error input, .error select {
            border: 2px solid #ff4444;
        }
        
        .pure-container {
            display: flex;
            flex-direction: column;
            align-items: flex-start;
            gap: 20px;
            width: 100%;
        }
        
        .pure-row {
            display: flex;
            flex-direction: column;
            gap: 10px;
            width: 100%;
            max-width: 960px;
            border-bottom: 1px solid #444;
            padding-bottom: 10px;
        }
        
        .pure-row.dragging {
            opacity: 0.5;
        }
        
        .name-section {
            display: flex;
            align-items: flex-end;
            gap: 10px;
            flex-wrap: nowrap;
        }
        
        .name-section div {
            display: flex;
            flex-direction: column;
        }
        
        .details-section {
            display: flex;
            flex-direction: column;
            gap: 10px;
            margin-left: 230px; /* Alignement avec le champ "Nom" */
        }
        
        .details-row {
            display: flex;
            align-items: flex-end;
            gap: 10px;
        }
        
        .details-row div {
            display: flex;
            flex-direction: column;
        }
        
        .pure-row input.pure-name {
            width: 220px;
            max-width: none;
            padding: 10px;
        }
        
        .pure-row input.pure-qty,
        .pure-row input.pure-price,
        .pure-row input.pure-max-persons {
            width: 150px;
            max-width: none;
            padding: 10px;
        }
        
        /* Appliquer la même largeur au champ "Prix" dans "Accès Soirée" */
        .presentation-fields input#access-price {
            width: 150px;
            max-width: none;
            padding: 10px;
        }
        
        .details-row .delete-details-btn {
            width: 30px;
            height: 30px;
            background-color: #ff4444;
            border: none;
            border-radius: 50%;
            color: white;
            font-size: 16px;
            cursor: pointer;
            display: flex;
            justify-content: center;
            align-items: center;
            transition: box-shadow 0.3s, transform 0.3s;
            margin-left: 5px;
        }
        
        .details-row .delete-details-btn:hover {
            box-shadow: 0 0 10px #ff4444, 0 0 5px #00D4FF;
            transform: scale(1.1);
        }
        
        .details-row .delete-details-btn:active {
            transform: scale(0.95);
        }
        
        .pure-duplicate-btn {
            width: 30px;
            height: 30px;
            background-color: #4CAF50;
            border: none;
            border-radius: 50%;
            color: white;
            font-size: 16px;
            cursor: pointer;
            display: flex;
            justify-content: center;
            align-items: center;
            transition: box-shadow 0.3s, transform 0.3s;
            margin-left: 5px;
        }
        
        .pure-delete-btn {
            width: 30px;
            height: 30px;
            background-color: #ff4444;
            border: none;
            border-radius: 50%;
            color: white;
            font-size: 16px;
            cursor: pointer;
            display: flex;
            justify-content: center;
            align-items: center;
            transition: box-shadow 0.3s, transform 0.3s;
            margin-left: 5px;
        }
        
        .pure-duplicate-btn:hover {
            box-shadow: 0 0 10px #4CAF50, 0 0 5px #00D4FF;
            transform: scale(1.1);
        }
        
        .pure-delete-btn:hover {
            box-shadow: 0 0 10px #ff4444, 0 0 5px #00D4FF;
            transform: scale(1.1);
        }
        
        .pure-duplicate-btn:active,
        .pure-delete-btn:active {
            transform: scale(0.95);
        }
        
        .add-details-btn {
            width: 30px;
            height: 30px;
            background-color: #4CAF50;
            border: none;
            border-radius: 50%;
            color: white;
            font-size: 16px;
            cursor: pointer;
            display: flex;
            justify-content: center;
            align-items: center;
            transition: box-shadow 0.3s, transform 0.3s;
            margin-top: 5px;
            margin-left: 155px; /* Centré entre "Quantité" et "Max. personnes" */
        }
        
        .add-details-btn:hover {
            box-shadow: 0 0 10px #4CAF50, 0 0 5px #00D4FF;
            transform: scale(1.1);
        }
        
        .add-details-btn:active {
            transform: scale(0.95);
        }
        
        .add-pure-btn {
            background: #444;
            padding: 8px 15px;
            border: 1px solid #333;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s;
            margin-top: 20px;
            text-align: center;
            align-self: flex-start;
        }
        
        .add-pure-btn:hover {
            background: #555;
        }
        
        .save-btn {
            padding: 15px;
            background: linear-gradient(to right, #9733EE, #DA22FF);
            color: white;
            border: 1px solid #333;
            border-radius: 6px;
            font-size: 18px;
            font-weight: 600;
            cursor: pointer;
            transition: box-shadow 0.3s;
            margin: 20px 0;
            width: 100%;
        }
        
        .save-btn:hover {
            box-shadow: 0 0 10px #9733EE, 0 0 5px #00D4FF;
        }
        
        .preview-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 15px;
            background: linear-gradient(135deg, #2a3435 0%, #3b4c5d 100%);
            border: 1px solid #FF00FF;
        }
        
        .preview-table th, .preview-table td {
            padding: 10px;
            border: 1px solid #555;
            text-align: left;
        }
        
        .preview-table th {
            background-color: #444;
            font-weight: 700;
            border-bottom: 2px solid #00D4FF;
        }
        
        .preview-table td {
            vertical-align: top;
        }
        
        .preview-table .day-cell {
            cursor: pointer;
            transition: box-shadow 0.3s;
        }
        
        .preview-table .day-cell:hover {
            box-shadow: 0 0 5px #00D4FF;
        }
        
        .preview-table .day-lundi,
        .preview-table .day-mercredi,
        .preview-table .day-vendredi,
        .preview-table .day-dimanche {
            background-color: rgba(255, 255, 255, 0.05);
        }
        
        .preview-table .day-mardi,
        .preview-table .day-jeudi,
        .preview-table .day-samedi {
            background-color: rgba(0, 0, 0, 0.05);
        }

        /* Styles pour le groupe de présentation */
        .presentation-group {
            display: flex;
            flex-direction: column;
            align-items: flex-start;
            position: relative;
        }
        
        .presentation-group h3 {
            margin-bottom: 15px;
            font-size: 18px;
        }
        
        .presentation-group::before {
            content: '';
            position: absolute;
            top: -10px;
            left: 0;
            width: 100%;
            height: 2px;
            background-color: #00D4FF;
        }
        
        .presentation-fields {
            display: flex;
            justify-content: flex-start;
            width: 100%;
            gap: 10px;
            flex-wrap: wrap;
        }

        .presentation-fields div {
            flex: 1;
            min-width: 220px;
        }

        /* Dissocier le champ "Prix" pour éviter les interférences de flex */
        .presentation-fields .price-container {
            flex: none; /* Dissocier de flex: 1 */
            min-width: auto; /* Supprimer la contrainte de min-width */
        }

        /* Dissocier le champ "Sexe" pour éviter les interférences de flex */
        .presentation-fields .sex-container {
            flex: none; /* Dissocier de flex: 1 */
            min-width: auto; /* Supprimer la contrainte de min-width */
        }

        .presentation-fields input,
        .presentation-fields select {
            width: 100%;
            max-width: none;
            padding: 10px;
        }

        /* Ajuster la largeur du champ "Sexe" pour correspondre à "Prix" */
        .presentation-fields .sex-container select {
            width: 150px; /* Même largeur que le champ "Prix" */
            max-width: none;
            padding: 10px;
        }

        @media (max-width: 768px) {
            .presentation-fields .sex-container select {
                width: 100%;
                max-width: 150px;
            }
        }
        
        /* Styles pour le groupe Pure Soirée */
        .pure-group {
            display: flex;
            flex-direction: column;
            align-items: flex-start;
            position: relative;
            width: 100%;
        }
        
        .pure-group h3 {
            margin-bottom: 15px;
            font-size: 18px;
        }
        
        .pure-group::before {
            content: '';
            position: absolute;
            top: -10px;
            left: 0;
            width: 100%;
            height: 2px;
            background-color: #00D4FF;
        }
        
        @media (max-width: 768px) {
            .pure-row {
                flex-direction: column;
                align-items: flex-start;
            }
            .details-row {
                flex-direction: column;
                align-items: flex-start;
                margin-left: 0;
            }
            .name-section {
                flex-direction: column;
                align-items: flex-start;
            }
            .name-section div {
                width: 100%;
            }
            input, select {
                max-width: 100%;
            }
            .day-filter {
                gap: 5px;
            }
            .days-checkboxes {
                flex-wrap: nowrap;
                overflow-x: auto;
            }
            .prestation-details {
                grid-template-columns: 1fr;
            }
            .presentation-fields {
                flex-direction: column;
                gap: 5px;
                align-items: flex-start;
            }
            .presentation-fields div {
                min-width: 100%;
            }
            .presentation-fields .price-container {
                min-width: 100%;
            }
            .presentation-fields input#access-price {
                width: 100%;
                max-width: 150px;
            }
            .presentation-fields .sex-container {
                min-width: 100%;
            }
            .price-sex-group {
                flex-direction: column;
                gap: 5px;
                align-items: flex-start;
            }
            .pure-row input.pure-name {
                width: 100%;
                max-width: 220px;
            }
            .pure-row input.pure-qty,
            .pure-row input.pure-price,
            .pure-row input.pure-max-persons {
                width: 100%;
                max-width: 150px;
            }
            .add-details-btn {
                margin-left: 0;
                align-self: center;
            }
            .add-pure-btn {
                width: auto;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="access-section">
            <div class="header-content">
                <h1>Gestion des Accès Soirée</h1>
                <div class="subtitle">Configurez vos formules d'entrée</div>
            </div>
            
            <div class="current-prestations">
                <h2>Prestations actuelles</h2>
                <div class="day-filter" id="day-filter">
                    <button class="day-btn" onclick="filterByDay('Lundi')">Lundi</button>
                    <button class="day-btn" onclick="filterByDay('Mardi')">Mardi</button>
                    <button class="day-btn" onclick="filterByDay('Mercredi')">Mercredi</button>
                    <button class="day-btn" onclick="filterByDay('Jeudi')">Jeudi</button>
                    <button class="day-btn" onclick="filterByDay('Vendredi')">Vendredi</button>
                    <button class="day-btn" onclick="filterByDay('Samedi')">Samedi</button>
                    <button class="day-btn" onclick="filterByDay('Dimanche')">Dimanche</button>
                    <button class="preview-btn" onclick="showPreview()">Aperçu</button>
                </div>
                <div class="prestation-container" id="access-prestations-list">
                    <!-- Les prestations "Accès Soirée" apparaîtront ici -->
                </div>
                <div id="separator-line" class="separator-line" style="display: none;"></div>
                <div class="prestation-container" id="pure-prestations-list">
                    <!-- Les prestations "Pure Soirée" apparaîtront ici -->
                </div>
                <div id="preview-section" style="display: none;"></div>
            </div>
            
            <div class="access-form" id="access-form">
                <div class="form-group">
                    <label>Jour(s)</label>
                    <div class="days-checkboxes" id="days-checkboxes">
                        <label><input type="checkbox" name="days" value="Lundi"> Lundi</label>
                        <label><input type="checkbox" name="days" value="Mardi"> Mardi</label>
                        <label><input type="checkbox" name="days" value="Mercredi"> Mercredi</label>
                        <label><input type="checkbox" name="days" value="Jeudi"> Jeudi</label>
                        <label><input type="checkbox" name="days" value="Vendredi"> Vendredi</label>
                        <label><input type="checkbox" name="days" value="Samedi"> Samedi</label>
                        <label><input type="checkbox" name="days" value="Dimanche"> Dimanche</label>
                    </div>
                </div>
                
                <div class="form-group presentation-group">
                    <h3>Accès Soirée</h3>
                    <div class="presentation-fields">
                        <div>
                            <label>Présentation accès normal</label>
                            <input type="text" placeholder="Ex: Entrée avec boisson" id="access-presentation-normal">
                        </div>
                        <div>
                            <label>Présentation accès heure creuse</label>
                            <input type="text" placeholder="Ex: Entrée Gratuit" id="access-presentation-low">
                        </div>
                        <div class="price-container">
                            <label>Prix</label>
                            <input type="number" step="0.01" min="0" placeholder="Prix (€)" id="access-price">
                        </div>
                        <div class="sex-container">
                            <label>Sexe</label>
                            <select id="access-sex">
                                <option value="Homme"><span style="color: #00D4FF;">♂</span> Homme</option>
                                <option value="Femme"><span style="color: #FF00FF;">♀</span> Femme</option>
                                <option value="H/F" selected><span style="color: #00D4FF;">♂</span>/<span style="color: #FF00FF;">♀</span> H/F</option>
                            </select>
                        </div>
                    </div>
                </div>
                
                <div class="form-group pure-group">
                    <h3>Pure Soirée</h3>
                    <div class="pure-container" id="pure-container">
                        <div class="pure-row">
                            <div class="name-section">
                                <div>
                                    <label>Nom</label>
                                    <input type="text" placeholder="Ex: Bouteille" class="pure-name">
                                </div>
                                <div>
                                    <label>Quantité</label>
                                    <input type="number" min="1" placeholder="Quantité" class="pure-qty">
                                </div>
                                <div>
                                    <label>Prix</label>
                                    <input type="number" step="0.01" min="0" placeholder="Prix (€)" class="pure-price">
                                </div>
                                <div>
                                    <label>Max. personnes</label>
                                    <input type="number" min="1" placeholder="Max. personnes" class="pure-max-persons">
                                </div>
                                <button class="pure-duplicate-btn" onclick="duplicatePure(this)">📋</button>
                                <button class="pure-delete-btn" onclick="deletePure(this)">🗑️</button>
                            </div>
                            <div class="details-section">
                                <button class="add-details-btn" onclick="addDetails(this)">+</button>
                            </div>
                        </div>
                    </div>
                    <div class="add-pure-btn" onclick="addPure()">+ Ajouter une ligne</div>
                </div>
            </div>
            
            <button class="save-btn" onclick="savePrestation()">Enregistrer les modifications</button>
        </div>
    </div>

    <script>
        let prestations = [];
        let selectedDayFilter = null;
        let isPreviewActive = false;

        function addPure() {
            const container = document.getElementById('pure-container');
            const pureDiv = document.createElement('div');
            pureDiv.className = 'pure-row';
            pureDiv.draggable = true;
            pureDiv.innerHTML = `
                <div class="name-section">
                    <div>
                        <label>Nom</label>
                        <input type="text" placeholder="Ex: Bouteille" class="pure-name">
                    </div>
                    <div>
                        <label>Quantité</label>
                        <input type="number" min="1" placeholder="Quantité" class="pure-qty">
                    </div>
                    <div>
                        <label>Prix</label>
                        <input type="number" step="0.01" min="0" placeholder="Prix (€)" class="pure-price">
                    </div>
                    <div>
                        <label>Max. personnes</label>
                        <input type="number" min="1" placeholder="Max. personnes" class="pure-max-persons">
                    </div>
                    <button class="pure-duplicate-btn" onclick="duplicatePure(this)">📋</button>
                    <button class="pure-delete-btn" onclick="deletePure(this)">🗑️</button>
                </div>
                <div class="details-section">
                    <button class="add-details-btn" onclick="addDetails(this)">+</button>
                </div>
            `;
            container.appendChild(pureDiv);
            addDragEvents(pureDiv);
        }

        function addDetails(button) {
            const detailsSection = button.parentElement;
            const detailsRow = document.createElement('div');
            detailsRow.className = 'details-row';
            detailsRow.innerHTML = `
                <div>
                    <label>Quantité</label>
                    <input type="number" min="1" placeholder="Quantité" class="pure-qty">
                </div>
                <div>
                    <label>Prix</label>
                    <input type="number" step="0.01" min="0" placeholder="Prix (€)" class="pure-price">
                </div>
                <div>
                    <label>Max. personnes</label>
                    <input type="number" min="1" placeholder="Max. personnes" class="pure-max-persons">
                </div>
                <button class="delete-details-btn" onclick="deleteDetails(this)">🗑️</button>
            `;
            detailsSection.insertBefore(detailsRow, button);
        }

        function deleteDetails(button) {
            button.parentElement.remove();
        }

        function duplicatePure(button) {
            const container = document.getElementById('pure-container');
            const originalRow = button.parentElement.parentElement;
            const newRow = originalRow.cloneNode(true);
            newRow.querySelector('.pure-duplicate-btn').onclick = () => duplicatePure(newRow.querySelector('.pure-duplicate-btn'));
            newRow.querySelector('.pure-delete-btn').onclick = () => deletePure(newRow.querySelector('.pure-delete-btn'));
            newRow.querySelector('.add-details-btn').onclick = () => addDetails(newRow.querySelector('.add-details-btn'));
            container.appendChild(newRow);
            addDragEvents(newRow);
        }

        function deletePure(button) {
            const container = document.getElementById('pure-container');
            button.parentElement.parentElement.remove();
            if (container.children.length === 0) {
                addPure();
            }
        }

        function addDragEvents(pureDiv) {
            pureDiv.addEventListener('dragstart', handlePureDragStart);
            pureDiv.addEventListener('dragover', handlePureDragOver);
            pureDiv.addEventListener('drop', handlePureDrop);
            pureDiv.addEventListener('dragend', handlePureDragEnd);
        }

        let draggedPure = null;

        function handlePureDragStart(e) {
            draggedPure = this;
            this.classList.add('dragging');
            e.dataTransfer.effectAllowed = 'move';
            e.dataTransfer.setData('text/html', this.innerHTML);
        }

        function handlePureDragOver(e) {
            e.preventDefault();
            e.dataTransfer.dropEffect = 'move';
        }

        function handlePureDrop(e) {
            e.preventDefault();
            if (draggedPure !== this) {
                const allPure = [...document.querySelectorAll('.pure-row')];
                const draggedIndex = allPure.indexOf(draggedPure);
                const droppedIndex = allPure.indexOf(this);
                const container = document.getElementById('pure-container');
                const pureArray = Array.from(container.children);

                const [movedPure] = pureArray.splice(draggedIndex, 1);
                pureArray.splice(droppedIndex, 0, movedPure);

                container.innerHTML = '';
                pureArray.forEach(pure => {
                    container.appendChild(pure);
                    addDragEvents(pure);
                });
            }
        }

        function handlePureDragEnd() {
            this.classList.remove('dragging');
            draggedPure = null;
        }

        function validateAccessSoiree() {
            const presentationLow = document.getElementById('access-presentation-low');
            const presentationNormal = document.getElementById('access-presentation-normal');
            const price = document.getElementById('access-price');

            // Reset error styles
            presentationLow.classList.remove('error');
            presentationNormal.classList.remove('error');
            price.classList.remove('error');

            const hasPresentation = presentationLow.value.trim() || presentationNormal.value.trim();
            const hasPrice = price.value !== '';

            let errors = [];

            // Si une présentation est remplie, le prix doit l'être aussi
            if (hasPresentation && !hasPrice) {
                errors.push('Veuillez remplir le champ "Prix" dans "Accès Soirée" si une présentation est indiquée.');
                price.classList.add('error');
            }

            // Si le prix est rempli, au moins une présentation doit l'être
            if (hasPrice && !hasPresentation) {
                errors.push('Veuillez remplir au moins une "Présentation" (normale ou heure creuse) dans "Accès Soirée" si un prix est indiqué.');
                presentationLow.classList.add('error');
                presentationNormal.classList.add('error');
            }

            return {
                isValid: (hasPresentation && hasPrice), // Valide si les deux sont remplis
                errors
            };
        }

        function validatePureSoiree() {
            const pureRows = document.querySelectorAll('.pure-row');
            let errors = [];
            let hasValidRow = false;

            pureRows.forEach((row, index) => {
                const name = row.querySelector('.name-section .pure-name');
                const firstQty = row.querySelector('.name-section .pure-qty');
                const firstPrice = row.querySelector('.name-section .pure-price');
                const firstMaxPersons = row.querySelector('.name-section .pure-max-persons');
                const additionalDetails = row.querySelectorAll('.details-section .details-row');

                // Reset error styles
                name.classList.remove('error');
                firstQty.classList.remove('error');
                firstPrice.classList.remove('error');
                firstMaxPersons.classList.remove('error');
                additionalDetails.forEach(detailRow => {
                    detailRow.querySelector('.pure-qty').classList.remove('error');
                    detailRow.querySelector('.pure-price').classList.remove('error');
                    detailRow.querySelector('.pure-max-persons').classList.remove('error');
                });

                // Check if the row is valid (all required fields filled)
                const isRowValid = name.value.trim() && firstQty.value && firstPrice.value && firstMaxPersons.value;

                if (isRowValid) {
                    hasValidRow = true;

                    // Validate additional details if present
                    additionalDetails.forEach((detailRow, detailIndex) => {
                        const qty = detailRow.querySelector('.pure-qty');
                        const price = detailRow.querySelector('.pure-price');
                        const maxPersons = detailRow.querySelector('.pure-max-persons');

                        if (!qty.value) {
                            errors.push(`Veuillez remplir le champ "Quantité" dans la ligne supplémentaire ${detailIndex + 1} de la ligne ${index + 1} de "Pure Soirée".`);
                            qty.classList.add('error');
                        }
                        if (!price.value) {
                            errors.push(`Veuillez remplir le champ "Prix" dans la ligne supplémentaire ${detailIndex + 1} de la ligne ${index + 1} de "Pure Soirée".`);
                            price.classList.add('error');
                        }
                        if (!maxPersons.value) {
                            errors.push(`Veuillez remplir le champ "Max. personnes" dans la ligne supplémentaire ${detailIndex + 1} de la ligne ${index + 1} de "Pure Soirée".`);
                            maxPersons.classList.add('error');
                        }
                    });
                } else if (name.value.trim() || firstQty.value || firstPrice.value || firstMaxPersons.value) {
                    // If any field is filled but not all, mark as error
                    if (!name.value.trim()) {
                        errors.push(`Veuillez remplir le champ "Nom" dans la ligne ${index + 1} de "Pure Soirée".`);
                        name.classList.add('error');
                    }
                    if (!firstQty.value) {
                        errors.push(`Veuillez remplir le champ "Quantité" dans la ligne ${index + 1} de "Pure Soirée".`);
                        firstQty.classList.add('error');
                    }
                    if (!firstPrice.value) {
                        errors.push(`Veuillez remplir le champ "Prix" dans la ligne ${index + 1} de "Pure Soirée".`);
                        firstPrice.classList.add('error');
                    }
                    if (!firstMaxPersons.value) {
                        errors.push(`Veuillez remplir le champ "Max. personnes" dans la ligne ${index + 1} de "Pure Soirée".`);
                        firstMaxPersons.classList.add('error');
                    }
                }
            });

            return { errors, hasValidRow };
        }

        function savePrestation() {
            const days = Array.from(document.querySelectorAll('input[name="days"]:checked')).map(checkbox => checkbox.value);
            const presentationLow = document.getElementById('access-presentation-low').value.trim();
            const presentationNormal = document.getElementById('access-presentation-normal').value.trim();
            const price = document.getElementById('access-price').value || '';
            const sex = document.getElementById('access-sex').value;

            // Validation for "Jour(s)"
            let errors = [];
            const daysCheckboxes = document.getElementById('days-checkboxes');
            daysCheckboxes.classList.remove('error');

            if (days.length === 0) {
                errors.push('Veuillez sélectionner au moins un jour dans "Jour(s)".');
                daysCheckboxes.classList.add('error');
            }

            // Validation for "Accès Soirée"
            const accessValidation = validateAccessSoiree();
            errors = [...errors, ...accessValidation.errors];
            const isAccessValid = accessValidation.isValid;

            // Validation for "Pure Soirée"
            const { errors: pureErrors, hasValidRow: isPureValid } = validatePureSoiree();
            errors = [...errors, ...pureErrors];

            // Vérifier si au moins une des deux sections est valide
            if (!isAccessValid && !isPureValid) {
                errors.push('Veuillez remplir au moins une section complète : soit "Accès Soirée" (présentation et prix), soit "Pure Soirée" (au moins une ligne complète).');
                alert(errors.join('\n'));
                return;
            }

            // Si des erreurs existent (par exemple, champs partiellement remplis), empêcher l'enregistrement
            if (errors.length > 0) {
                alert(errors.join('\n'));
                return;
            }

            // Collect pure items data from "Pure Soirée" (peut être vide si "Accès Soirée" est rempli)
            const pureItems = isPureValid ? Array.from(document.querySelectorAll('.pure-row')).map(row => {
                const name = row.querySelector('.name-section .pure-name').value;
                const firstDetail = {
                    qty: row.querySelector('.name-section .pure-qty').value,
                    price: row.querySelector('.name-section .pure-price').value,
                    maxPersons: row.querySelector('.name-section .pure-max-persons').value
                };
                const additionalDetails = Array.from(row.querySelectorAll('.details-section .details-row')).map(detailRow => ({
                    qty: detailRow.querySelector('.pure-qty').value,
                    price: detailRow.querySelector('.pure-price').value,
                    maxPersons: detailRow.querySelector('.pure-max-persons').value
                }));
                const details = [firstDetail, ...additionalDetails];
                return { name, details };
            }) : [];

            const prestation = { days, presentationLow, presentationNormal, price, sex, pureItems };
            prestations.push(prestation);
            renderPrestations();
            resetForm();
        }

        function resetForm() {
            document.querySelectorAll('input[name="days"]').forEach(checkbox => checkbox.checked = false);
            document.getElementById('access-presentation-low').value = '';
            document.getElementById('access-presentation-normal').value = '';
            document.getElementById('access-price').value = '';
            document.getElementById('access-sex').value = 'H/F';
            const pureContainer = document.getElementById('pure-container');
            pureContainer.innerHTML = '';
            addPure();
        }

        function renderPrestations() {
            const accessList = document.getElementById('access-prestations-list');
            const pureList = document.getElementById('pure-prestations-list');
            const separatorLine = document.getElementById('separator-line');
            const previewSection = document.getElementById('preview-section');
            const accessForm = document.getElementById('access-form');
            const previewBtn = document.querySelector('.preview-btn');
            accessList.style.display = 'block';
            pureList.style.display = 'block';
            previewSection.style.display = 'none';
            accessForm.style.display = 'block';
            previewBtn.classList.remove('active');
            isPreviewActive = false;

            accessList.innerHTML = '';
            pureList.innerHTML = '';
            const filteredPrestations = selectedDayFilter 
                ? prestations.filter(p => p.days.includes(selectedDayFilter))
                : [...prestations];

            let hasAccess = false;
            let hasPure = false;

            filteredPrestations.forEach((prestation, index) => {
                // Structure pour "Accès Soirée"
                if (prestation.presentationLow || prestation.presentationNormal || prestation.price) {
                    hasAccess = true;
                    const accessItem = document.createElement('div');
                    accessItem.className = 'prestation-item';
                    accessItem.draggable = true;
                    accessItem.dataset.index = index;

                    const presentationText = [
                        prestation.presentationLow ? `Heure creuse: ${prestation.presentationLow}` : '',
                        prestation.presentationNormal ? `Normal: ${prestation.presentationNormal}` : ''
                    ].filter(Boolean).join(' / ');
                    const accessText = presentationText.split(' / ')[0].split(': ')[0] || '';
                    const prestationText = presentationText.split(': ')[1] || '';

                    const accessLabels = !accessList.hasChildNodes() ? `
                        <div>Accès Soirée:<br>${accessText}</div>
                        <div>Prestation:<br>${prestationText}</div>
                        <div>Prix:<br>${prestation.price}€</div>
                        <div>Sexe:<br>${prestation.sex}</div>
                    ` : `
                        <div>${accessText}</div>
                        <div>${prestationText}</div>
                        <div>${prestation.price}€</div>
                        <div>${prestation.sex}</div>
                    `;

                    accessItem.innerHTML = `
                        <div class="prestation-details">
                            ${accessLabels}
                            <div>
                                <button class="edit-btn" onclick="editPrestation(${index})">✏️</button>
                                <button class="delete-btn" onclick="deletePrestation(${index})">🗑️</button>
                            </div>
                        </div>
                    `;
                    accessList.appendChild(accessItem);
                }

                // Structure pour "Pure Soirée"
                if (prestation.pureItems.length > 0) {
                    hasPure = true;
                    prestation.pureItems.forEach((pure, pureIndex) => {
                        const pureItem = document.createElement('div');
                        pureItem.className = 'prestation-item';
                        pureItem.draggable = true;
                        pureItem.dataset.index = index;

                        const qtyText = pure.details.map(detail => detail.qty).join('<br>');
                        const priceText = pure.details.map(detail => `${detail.price}€`).join('<br>');
                        const maxPersonsText = pure.details.map(detail => detail.maxPersons).join('<br>');

                        const pureLabels = !pureList.hasChildNodes() ? `
                            <div>Pure Soirée:<br>${pure.name}</div>
                            <div>Quantité:<br>${qtyText}</div>
                            <div>Prix:<br>${priceText}</div>
                            <div>Max. personnes:<br>${maxPersonsText}</div>
                        ` : `
                            <div>${pure.name}</div>
                            <div>${qtyText}</div>
                            <div>${priceText}</div>
                            <div>${maxPersonsText}</div>
                        `;

                        pureItem.innerHTML = `
                            <div class="prestation-details">
                                ${pureLabels}
                                <div>
                                    <button class="edit-btn" onclick="editPrestation(${index})">✏️</button>
                                    <button class="delete-btn" onclick="deletePrestation(${index})">🗑️</button>
                                </div>
                            </div>
                        `;
                        pureList.appendChild(pureItem);
                    });
                }
            });

            // Gestion de la visibilité des conteneurs et de la ligne de séparation
            accessList.style.display = hasAccess ? 'block' : 'none';
            pureList.style.display = hasPure ? 'block' : 'none';
            separatorLine.style.display = (hasAccess && hasPure) ? 'block' : 'none';

            const accessItems = accessList.querySelectorAll('.prestation-item');
            const pureItems = pureList.querySelectorAll('.prestation-item');

            accessItems.forEach(item => {
                item.addEventListener('dragstart', handleDragStart);
                item.addEventListener('dragover', handleDragOver);
                item.addEventListener('drop', handleDrop);
                item.addEventListener('dragend', handleDragEnd);
            });

            pureItems.forEach(item => {
                item.addEventListener('dragstart', handleDragStart);
                item.addEventListener('dragover', handleDragOver);
                item.addEventListener('drop', handleDrop);
                item.addEventListener('dragend', handleDragEnd);
            });
        }

        let draggedItem = null;

        function handleDragStart(e) {
            draggedItem = this;
            this.classList.add('dragging');
            e.dataTransfer.effectAllowed = 'move';
            e.dataTransfer.setData('text/html', this.innerHTML);
        }

        function handleDragOver(e) {
            e.preventDefault();
            e.dataTransfer.dropEffect = 'move';
        }

        function handleDrop(e) {
            e.preventDefault();
            if (draggedItem !== this) {
                const allItems = [...document.querySelectorAll('.prestation-item')];
                const draggedIndex = parseInt(draggedItem.dataset.index);
                const droppedIndex = parseInt(this.dataset.index);
                const filteredPrestations = selectedDayFilter 
                    ? prestations.filter(p => p.days.includes(selectedDayFilter))
                    : [...prestations];
                
                const [movedItem] = filteredPrestations.splice(draggedIndex, 1);
                filteredPrestations.splice(droppedIndex, 0, movedItem);

                if (!selectedDayFilter) {
                    prestations = filteredPrestations;
                } else {
                    const originalIndices = allItems.map(item => parseInt(item.dataset.index));
                    const newPrestations = [];
                    filteredPrestations.forEach((item, i) => {
                        const origIndex = originalIndices[draggedIndex] === originalIndices[droppedIndex] 
                            ? originalIndices[droppedIndex] 
                            : originalIndices[i];
                        newPrestations[origIndex] = item;
                    });
                    prestations = newPrestations.filter(Boolean);
                }
                renderPrestations();
            }
        }

        function handleDragEnd() {
            this.classList.remove('dragging');
            draggedItem = null;
        }

        function filterByDay(day) {
            const buttons = document.querySelectorAll('.day-btn');
            const previewBtn = document.querySelector('.preview-btn');
            buttons.forEach(btn => btn.classList.remove('active'));
            previewBtn.classList.remove('active');
            if (selectedDayFilter === day) {
                selectedDayFilter = null;
            } else {
                selectedDayFilter = day;
                document.querySelector(`button[onclick="filterByDay('${day}')"]`).classList.add('active');
            }
            isPreviewActive = false;
            renderPrestations();
        }

        function deletePrestation(index) {
            const filteredIndex = prestations.findIndex((_, i) => i === index && (!selectedDayFilter || prestations[i].days.includes(selectedDayFilter)));
            prestations.splice(filteredIndex, 1);
            renderPrestations();
        }

        function editPrestation(index) {
            const filteredIndex = prestations.findIndex((_, i) => i === index && (!selectedDayFilter || prestations[i].days.includes(selectedDayFilter)));
            const prestation = prestations[filteredIndex];

            document.querySelectorAll('input[name="days"]').forEach(checkbox => {
                checkbox.checked = prestation.days.includes(checkbox.value);
            });
            document.getElementById('access-presentation-low').value = prestation.presentationLow || '';
            document.getElementById('access-presentation-normal').value = prestation.presentationNormal || '';
            document.getElementById('access-price').value = prestation.price || '';
            document.getElementById('access-sex').value = prestation.sex;
            
            const pureContainer = document.getElementById('pure-container');
            pureContainer.innerHTML = '';
            prestation.pureItems.forEach(pure => {
                const pureDiv = document.createElement('div');
                pureDiv.className = 'pure-row';
                pureDiv.draggable = true;
                const firstDetail = pure.details[0] || { qty: '', price: '', maxPersons: '' };
                const additionalDetails = pure.details.slice(1);
                pureDiv.innerHTML = `
                    <div class="name-section">
                        <div>
                            <label>Nom</label>
                            <input type="text" value="${pure.name}" class="pure-name">
                        </div>
                        <div>
                            <label>Quantité</label>
                            <input type="number" min="1" value="${firstDetail.qty}" class="pure-qty">
                        </div>
                        <div>
                            <label>Prix</label>
                            <input type="number" step="0.01" min="0" value="${firstDetail.price}" class="pure-price">
                        </div>
                        <div>
                            <label>Max. personnes</label>
                            <input type="number" min="1" value="${firstDetail.maxPersons}" class="pure-max-persons">
                        </div>
                        <button class="pure-duplicate-btn" onclick="duplicatePure(this)">📋</button>
                        <button class="pure-delete-btn" onclick="deletePure(this)">🗑️</button>
                    </div>
                    <div class="details-section">
                        ${additionalDetails.map(detail => `
                            <div class="details-row">
                                <div>
                                    <label>Quantité</label>
                                    <input type="number" min="1" value="${detail.qty}" class="pure-qty">
                                </div>
                                <div>
                                    <label>Prix</label>
                                    <input type="number" step="0.01" min="0" value="${detail.price}" class="pure-price">
                                </div>
                                <div>
                                    <label>Max. personnes</label>
                                    <input type="number" min="1" value="${detail.maxPersons}" class="pure-max-persons">
                                </div>
                                <button class="delete-details-btn" onclick="deleteDetails(this)">🗑️</button>
                            </div>
                        `).join('')}
                        <button class="add-details-btn" onclick="addDetails(this)">+</button>
                    </div>
                `;
                pureContainer.appendChild(pureDiv);
                addDragEvents(pureDiv);
            });
            if (pureContainer.children.length === 0) {
                addPure();
            }

            prestations.splice(filteredIndex, 1);
            renderPrestations();
        }

        function showPreview() {
            const previewSection = document.getElementById('preview-section');
            const accessList = document.getElementById('access-prestations-list');
            const pureList = document.getElementById('pure-prestations-list');
            const separatorLine = document.getElementById('separator-line');
            const accessForm = document.getElementById('access-form');
            const previewBtn = document.querySelector('.preview-btn');
            const buttons = document.querySelectorAll('.day-btn');

            accessList.style.display = 'none';
            pureList.style.display = 'none';
            separatorLine.style.display = 'none';
            accessForm.style.display = 'none';
            previewSection.style.display = 'block';
            previewBtn.classList.add('active');
            buttons.forEach(btn => btn.classList.remove('active'));
            selectedDayFilter = null;
            isPreviewActive = true;

            const daysOrder = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi', 'Dimanche'];
            let html = '<table class="preview-table"><tr><th>Jour</th><th>Accès</th><th>Prestation</th><th>Prix</th><th>Sexe</th><th>Quantité:</th><th>Max. personnes:</th></tr>';
            
            daysOrder.forEach((day, dayIndex) => {
                const dayPrestations = prestations.filter(p => p.days.includes(day));
                const dayClass = `day-${day.toLowerCase()}`;
                if (dayPrestations.length > 0) {
                    dayPrestations.forEach((prestation, prestationIndex) => {
                        const presentationText = [
                            prestation.presentationLow ? `Heure creuse: ${prestation.presentationLow}` : '',
                            prestation.presentationNormal ? `Normal: ${prestation.presentationNormal}` : ''
                        ].filter(Boolean).join(' / ');
                        const accessText = presentationText.split(' / ')[0].split(': ')[0] || '';
                        const prestationText = presentationText.split(': ')[1] || '';

                        // Ajout des données "Pure Soirée" si présentes
                        let purePrestationText = prestationText;
                        let purePriceText = prestation.price ? `${prestation.price}€` : '';
                        let pureQtyText = '';
                        let pureMaxPersonsText = '';

                        if (prestation.pureItems.length > 0) {
                            const pureNames = prestation.pureItems.map(pure => pure.name).join('<br>');
                            const purePrices = prestation.pureItems.map(pure => 
                                pure.details.map(detail => `${detail.price}€`).join('<br>')
                            ).join('<br>');
                            const pureQuantities = prestation.pureItems.map(pure => 
                                pure.details.map(detail => detail.qty).join('<br>')
                            ).join('<br>');
                            const pureMaxPersons = prestation.pureItems.map(pure => 
                                pure.details.map(detail => detail.maxPersons).join('<br>')
                            ).join('<br>');

                            purePrestationText = purePrestationText ? `${purePrestationText}<br>${pureNames}` : pureNames;
                            purePriceText = purePriceText ? `${purePriceText}<br>${purePrices}` : purePrices;
                            pureQtyText = pureQuantities;
                            pureMaxPersonsText = pureMaxPersons;
                        }

                        html += `
                            <tr class="${dayClass}">
                                ${prestationIndex === 0 ? `<td class="day-cell" onclick="filterByDay('${day}')">${day}</td>` : '<td></td>'}
                                <td>${accessText}</td>
                                <td>${purePrestationText}</td>
                                <td>${purePriceText}</td>
                                <td>${prestation.sex}</td>
                                <td>${pureQtyText}</td>
                                <td>${pureMaxPersonsText}</td>
                            </tr>
                        `;
                    });
                } else {
                    html += `<tr class="${dayClass}"><td class="day-cell" onclick="filterByDay('${day}')">${day}</td><td colspan="6">Aucune prestation</td></tr>`;
                }
            });
            
            html += '</table>';
            previewSection.innerHTML = html;
        }
    </script>
</body>
</html>
